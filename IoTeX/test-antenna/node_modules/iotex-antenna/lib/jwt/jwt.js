"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sign = sign;
exports.verify = verify;

var _account = require("../account/account");

var _utils = require("../account/utils");

var _crypto = require("../crypto/crypto");

function base64url(str, encoding) {
  return Buffer.from(str, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}

function toString(obj) {
  if (typeof obj === "string") {
    return obj;
  }

  if (typeof obj === "number" || Buffer.isBuffer(obj)) {
    return obj.toString();
  }

  return JSON.stringify(obj);
} // tslint:disable-next-line:no-any


function isObject(thing) {
  return Object.prototype.toString.call(thing) === "[object Object]";
} // tslint:disable-next-line:no-any


function safeJsonParse(thing) {
  if (isObject(thing)) {
    // @ts-ignore
    return thing;
  }

  try {
    // @ts-ignore
    return JSON.parse(thing);
  } catch (e) {
    return {};
  }
}

function jwsSecuredInput(header, payload, encoding = "utf8") {
  const encodedHeader = base64url(toString(header), "binary");
  const encodedPayload = base64url(toString(payload), encoding);
  return `${encodedHeader}.${encodedPayload}`;
} // tslint:disable-next-line:no-any


function headerFromJWS(jwsSig) {
  const encodedHeader = jwsSig.split(".", 1)[0];
  return safeJsonParse(Buffer.from(encodedHeader, "base64").toString("binary"));
} // tslint:disable-next-line:no-any


function payloadFromJWS(jwsSig) {
  const encodedHeader = jwsSig.split(".")[1];
  return safeJsonParse(Buffer.from(encodedHeader, "base64").toString("binary"));
}

function securedInputFromJWS(jwsSig) {
  return jwsSig.split(".", 2).join(".");
}

function signatureFromJWS(jwsSig) {
  return jwsSig.split(".")[2];
}

const ALG = "EK256K";

async function sign(payload, secretOrPrivateKey) {
  const securedInput = jwsSecuredInput({
    alg: ALG,
    typ: "JWT"
  }, payload);

  const acct = _account.Account.fromPrivateKey(secretOrPrivateKey);

  const sigHex = await acct.sign((0, _utils.fromUtf8)(securedInput));
  const signature = base64url(sigHex.toString("hex"), "hex");
  return `${securedInput}.${signature}`;
}

async function verify(token) {
  const header = headerFromJWS(token);

  if (!header) {
    throw new Error("header is empty or does not have alg");
  }

  if (header.alg !== ALG) {
    throw new Error(`alg should be ${ALG} but got ${header.alg}`);
  }

  const securedInput = securedInputFromJWS(token);
  const signature = signatureFromJWS(token);
  const empty = new _account.Account();
  const recoveredAddress = empty.recover((0, _utils.fromUtf8)(`${securedInput}`), Buffer.from(signature, "base64"), false);
  const securedInputObject = payloadFromJWS(token);
  const secretOrPublicKey = securedInputObject.iss;
  const expectedAddress = (0, _crypto.publicKeyToAddress)(secretOrPublicKey);

  if (recoveredAddress !== expectedAddress) {
    throw new Error(`${recoveredAddress} signed the signature but we are expecting ${expectedAddress}`);
  }

  if (!securedInputObject.iss || securedInputObject.iss !== secretOrPublicKey) {
    throw new Error(`issuer of the token does not match ${secretOrPublicKey}`);
  }

  return securedInputObject;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,