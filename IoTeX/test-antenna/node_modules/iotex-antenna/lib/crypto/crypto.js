"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publicKeyToAddress = publicKeyToAddress;
exports.privateKeyToAccount = privateKeyToAccount;
exports.recover = exports.makeSigner = void 0;

var _elliptic = _interopRequireDefault(require("elliptic"));

var _account = require("eth-lib/lib/account");

var _bytes = _interopRequireDefault(require("eth-lib/lib/bytes"));

var _address = require("./address");

var _hash = require("./hash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-ignore
// @ts-ignore
const secp256k1 = new _elliptic.default.ec("secp256k1"); // eslint-disable-line

function publicKeyToAddress(publicKey) {
  const key = secp256k1.keyFromPublic(publicKey, "hex");
  const publicKeyBytes = key.getPublic(false, "ByteArray");
  const hashBytes = (0, _hash.hash160b)(publicKeyBytes.slice(1));
  return (0, _address.fromBytes)(hashBytes).string();
}

function privateKeyToAccount(privateKey) {
  const buffer = Buffer.from(privateKey, "hex");
  const ecKey = secp256k1.keyFromPrivate(buffer);
  const publicKey = ecKey.getPublic(false, "hex");
  const publicKeyBytes = ecKey.getPublic(false, "ByteArray");
  const hashBytes = (0, _hash.hash160b)(publicKeyBytes.slice(1));
  const adObj = (0, _address.fromBytes)(hashBytes);
  return {
    address: adObj.string(),
    publicKey,
    privateKey
  };
}

const makeSigner = addToV => (hash, privateKey) => {
  const signature = secp256k1.keyFromPrivate(Buffer.from(privateKey, "hex")).sign(Buffer.from(hash, "hex"), {
    canonical: true,
    pers: undefined
  });
  const signed = (0, _account.encodeSignature)([_bytes.default.fromNumber(addToV + (signature.recoveryParam || 0)), _bytes.default.pad(32, _bytes.default.fromNat(`0x${signature.r.toString(16)}`)), _bytes.default.pad(32, _bytes.default.fromNat(`0x${signature.s.toString(16)}`))]);
  return signed.slice(2);
};

exports.makeSigner = makeSigner;

const recover = (hash, signature) => {
  const vals = (0, _account.decodeSignature)(`0x${signature.toString("hex")}`);
  const vrs = {
    v: _bytes.default.toNumber(vals[0]),
    r: vals[1].slice(2),
    s: vals[2].slice(2)
  };
  const ecPublicKey = secp256k1.recoverPubKey(hash, vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2);
  const publicKey = ecPublicKey.encode("hex", false);
  return publicKeyToAddress(publicKey);
};

exports.recover = recover;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jcnlwdG8vY3J5cHRvLnRzIl0sIm5hbWVzIjpbInNlY3AyNTZrMSIsImVsbGlwdGljIiwiZWMiLCJwdWJsaWNLZXlUb0FkZHJlc3MiLCJwdWJsaWNLZXkiLCJrZXkiLCJrZXlGcm9tUHVibGljIiwicHVibGljS2V5Qnl0ZXMiLCJnZXRQdWJsaWMiLCJoYXNoQnl0ZXMiLCJzbGljZSIsInN0cmluZyIsInByaXZhdGVLZXlUb0FjY291bnQiLCJwcml2YXRlS2V5IiwiYnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsImVjS2V5Iiwia2V5RnJvbVByaXZhdGUiLCJhZE9iaiIsImFkZHJlc3MiLCJtYWtlU2lnbmVyIiwiYWRkVG9WIiwiaGFzaCIsInNpZ25hdHVyZSIsInNpZ24iLCJjYW5vbmljYWwiLCJwZXJzIiwidW5kZWZpbmVkIiwic2lnbmVkIiwiQnl0ZXMiLCJmcm9tTnVtYmVyIiwicmVjb3ZlcnlQYXJhbSIsInBhZCIsImZyb21OYXQiLCJyIiwidG9TdHJpbmciLCJzIiwicmVjb3ZlciIsInZhbHMiLCJ2cnMiLCJ2IiwidG9OdW1iZXIiLCJlY1B1YmxpY0tleSIsInJlY292ZXJQdWJLZXkiLCJlbmNvZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUVBOztBQUVBOztBQUNBOzs7O0FBTkE7QUFFQTtBQU1BLE1BQU1BLFNBQVMsR0FBRyxJQUFJQyxrQkFBU0MsRUFBYixDQUFnQixXQUFoQixDQUFsQixDLENBQWdEOztBQUV6QyxTQUFTQyxrQkFBVCxDQUE0QkMsU0FBNUIsRUFBdUQ7QUFDNUQsUUFBTUMsR0FBRyxHQUFHTCxTQUFTLENBQUNNLGFBQVYsQ0FBd0JGLFNBQXhCLEVBQW1DLEtBQW5DLENBQVo7QUFDQSxRQUFNRyxjQUFjLEdBQUdGLEdBQUcsQ0FBQ0csU0FBSixDQUFjLEtBQWQsRUFBcUIsV0FBckIsQ0FBdkI7QUFDQSxRQUFNQyxTQUFTLEdBQUcsb0JBQVNGLGNBQWMsQ0FBQ0csS0FBZixDQUFxQixDQUFy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QyxTQUFTLEdBQUd1QyxXQUFXLENBQUNFLE1BQVosQ0FBbUIsS0FBbkIsRUFBMEIsS0FBMUIsQ0FBbEI7QUFDQSxTQUFPMUMsa0JBQWtCLENBQUNDLFNBQUQsQ0FBekI7QUFDRCxDQWRNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVsbGlwdGljIGZyb20gXCJlbGxpcHRpY1wiO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgZGVjb2RlU2lnbmF0dXJlLCBlbmNvZGVTaWduYXR1cmUgfSBmcm9tIFwiZXRoLWxpYi9saWIvYWNjb3VudFwiO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IEJ5dGVzIGZyb20gXCJldGgtbGliL2xpYi9ieXRlc1wiO1xuXG5pbXBvcnQgeyBmcm9tQnl0ZXMgfSBmcm9tIFwiLi9hZGRyZXNzXCI7XG5pbXBvcnQgeyBoYXNoMTYwYiB9IGZyb20gXCIuL2hhc2hcIjtcblxuY29uc3Qgc2VjcDI1NmsxID0gbmV3IGVsbGlwdGljLmVjKFwic2VjcDI1NmsxXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbmV4cG9ydCBmdW5jdGlvbiBwdWJsaWNLZXlUb0FkZHJlc3MocHVibGljS2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBrZXkgPSBzZWNwMjU2azEua2V5RnJvbVB1YmxpYyhwdWJsaWNLZXksIFwiaGV4XCIpO1xuICBjb25zdCBwdWJsaWNLZXlCeXRlcyA9IGtleS5nZXRQdWJsaWMoZmFsc2UsIFwiQnl0ZUFycmF5XCIpO1xuICBjb25zdCBoYXNoQnl0ZXMgPSBoYXNoMTYwYihwdWJsaWNLZXlCeXRlcy5zbGljZSgxKSk7XG4gIHJldHVybiBmcm9tQnl0ZXMoaGFzaEJ5dGVzKS5zdHJpbmcoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVLZXlUb0FjY291bnQoXG4gIHByaXZhdGVLZXk6IHN0cmluZ1xuKTogeyBhZGRyZXNzOiBzdHJpbmc7IHB1YmxpY0tleTogc3RyaW5nOyBwcml2YXRlS2V5OiBzdHJpbmcgfSB7XG4gIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHByaXZhdGVLZXksIFwiaGV4XCIpO1xuICBjb25zdCBlY0tleSA9IHNlY3AyNTZrMS5rZXlGcm9tUHJpdmF0ZShidWZmZXIpO1xuICBjb25zdCBwdWJsaWNLZXkgPSBlY0tleS5nZXRQdWJsaWMoZmFsc2UsIFwiaGV4XCIpO1xuICBjb25zdCBwdWJsaWNLZXlCeXRlcyA9IGVjS2V5LmdldFB1YmxpYyhmYWxzZSwgXCJCeXRlQXJyYXlcIik7XG4gIGNvbnN0IGhhc2hCeXRlcyA9IGhhc2gxNjBiKHB1YmxpY0tleUJ5dGVzLnNsaWNlKDEpKTtcbiAgY29uc3QgYWRPYmogPSBmcm9tQnl0ZXMoaGFzaEJ5dGVzKTtcbiAgcmV0dXJuIHtcbiAgICBhZGRyZXNzOiBhZE9iai5zdHJpbmcoKSxcbiAgICBwdWJsaWNLZXksXG4gICAgcHJpdmF0ZUtleVxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgbWFrZVNpZ25lciA9IChhZGRUb1Y6IG51bWJlcikgPT4gKFxuICBoYXNoOiBzdHJpbmcsXG4gIHByaXZhdGVLZXk6IHN0cmluZ1xuKSA9PiB7XG4gIGNvbnN0IHNpZ25hdHVyZSA9IHNlY3AyNTZrMVxuICAgIC5rZXlGcm9tUHJpdmF0ZShCdWZmZXIuZnJvbShwcml2YXRlS2V5LCBcImhleFwiKSlcbiAgICAuc2lnbihCdWZmZXIuZnJvbShoYXNoLCBcImhleFwiKSwgeyBjYW5vbmljYWw6IHRydWUsIHBlcnM6IHVuZGVmaW5lZCB9KTtcblxuICBjb25zdCBzaWduZWQgPSBlbmNvZGVTaWduYXR1cmUoW1xuICAgIEJ5dGVzLmZyb21OdW1iZXIoYWRkVG9WICsgKHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtIHx8IDApKSxcbiAgICBCeXRlcy5wYWQoMzIsIEJ5dGVzLmZyb21OYXQoYDB4JHtzaWduYXR1cmUuci50b1N0cmluZygxNil9YCkpLFxuICAgIEJ5dGVzLnBhZCgzMiwgQnl0ZXMuZnJvbU5hdChgMHgke3NpZ25hdHVyZS5zLnRvU3RyaW5nKDE2KX1gKSlcbiAgXSk7XG4gIHJldHVybiBzaWduZWQuc2xpY2UoMik7XG59O1xuXG5leHBvcnQgY29uc3QgcmVjb3ZlciA9IChoYXNoOiBCdWZmZXIsIHNpZ25hdHVyZTogQnVmZmVyKSA9PiB7XG4gIGNvbnN0IHZhbHMgPSBkZWNvZGVTaWduYXR1cmUoYDB4JHtzaWduYXR1cmUudG9TdHJpbmcoXCJoZXhcIil9YCk7XG4gIGNvbnN0IHZycyA9IHtcbiAgICB2OiBCeXRlcy50b051bWJlcih2YWxzWzBdKSxcbiAgICByOiB2YWxzWzFdLnNsaWNlKDIpLFxuICAgIHM6IHZhbHNbMl0uc2xpY2UoMilcbiAgfTtcbiAgY29uc3QgZWNQdWJsaWNLZXkgPSBzZWNwMjU2azEucmVjb3ZlclB1YktleShcbiAgICBoYXNoLFxuICAgIHZycyxcbiAgICB2cnMudiA8IDIgPyB2cnMudiA6IDEgLSAodnJzLnYgJSAyKVxuICApO1xuICBjb25zdCBwdWJsaWNLZXkgPSBlY1B1YmxpY0tleS5lbmNvZGUoXCJoZXhcIiwgZmFsc2UpO1xuICByZXR1cm4gcHVibGljS2V5VG9BZGRyZXNzKHB1YmxpY0tleSk7XG59O1xuIl19