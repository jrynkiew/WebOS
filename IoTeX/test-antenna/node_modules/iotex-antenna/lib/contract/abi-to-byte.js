"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAbiFunctions = getAbiFunctions;
exports.getArgTypes = getArgTypes;
exports.getHeaderHash = getHeaderHash;
exports.encodeArguments = encodeArguments;
exports.encodeInputData = encodeInputData;
exports.Constructor = void 0;

var _web3EthAbi = _interopRequireDefault(require("web3-eth-abi"));

var address = _interopRequireWildcard(require("../crypto/address"));

var _hash = require("../crypto/hash");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* tslint:disable:no-any */
const Abi = _web3EthAbi.default;

function getAbiFunctions(abi) {
  const abiFunctions = {};
  abi.forEach(f => {
    if (f.type === "function") {
      abiFunctions[f.name] = f;
    }

    if (f.type === "constructor") {
      abiFunctions[Constructor] = f;
    }
  });
  return abiFunctions;
}

function getArgTypes(fnAbi) {
  const args = [];
  fnAbi.inputs.forEach(field => {
    args.push({
      name: field.name,
      type: field.type
    });
  });
  return args;
}

function getHeaderHash(fnAbi, args) {
  const inputs = args.map(i => {
    return i.type;
  });
  const signature = `${fnAbi.name}(${inputs.join(",")})`;
  const keccak256 = (0, _hash.hash256b)(signature).toString("hex");
  return keccak256.slice(0, 8);
}

function encodeArguments(args, userInput) {
  const types = [];
  const values = [];
  (args || []).forEach((arg, index) => {
    let name = arg.name;

    if (name === "") {
      name = `arg${index}`;
    }

    if (arg.type === "bool") {
      types.push("uint256");
    } else {
      types.push(arg.type);
    }

    if (userInput.hasOwnProperty(name)) {
      let value = userInput[name];

      if (arg.type === "address") {
        value = address.fromString(value).stringEth();
      }

      if (arg.type === "address[]") {
        for (let i = 0; i < value.length; i++) {
          value[i] = address.fromString(value[i]).stringEth();
        }
      }

      values.push(value);
    } else {
      values.push("");
    }
  });

  try {
    const encoded = Abi.encodeParameters(types, values);
    return encoded.substring(2);
  } catch (e) {
    throw new Error(`failed to rawEncode: ${e.stack}, types: ${types}, values: ${values}`);
  }
}

const Constructor = "constructor";
exports.Constructor = Constructor;

function encodeInputData(abiByFunc, fnName, userInput) {
  const fnAbi = abiByFunc[fnName];
  const args = getArgTypes(fnAbi);
  const header = getHeaderHash(fnAbi, args);
  const encodedArgs = encodeArguments(args, userInput);
  return `${header}${encodedArgs}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,