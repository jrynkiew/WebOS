"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var protoLoader = _interopRequireWildcard(require("@grpc/proto-loader"));

var _grpc = _interopRequireDefault(require("grpc"));

var _util = require("util");

var _rootCerts = require("./root-certs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const packageDefinition = protoLoader.loadSync(`${__dirname}/../../proto/api/api.proto`, {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true,
  includeDirs: [`${__dirname}/../../`]
});

const iotexapi = _grpc.default.loadPackageDefinition(packageDefinition).iotexapi;

class RpcMethod {
  constructor(hostname, options = {}) {
    _defineProperty(this, "client", void 0);

    _defineProperty(this, "timeout", void 0);

    _defineProperty(this, "apiToken", void 0);

    _defineProperty(this, "credentials", void 0);

    const normalizedHostname = String(hostname).replace(/^(http:\/\/|https:\/\/)/, "");

    if (hostname.startsWith("https://")) {
      options.enableSsl = true;
    }

    this.credentials = options && options.enableSsl ? _grpc.default.credentials.createSsl(Buffer.from(_rootCerts.ROOT_CERTS)) : _grpc.default.credentials.createInsecure(); // @ts-ignore

    this.client = new iotexapi.APIService(normalizedHostname, this.credentials, null);
    this.timeout = options.timeout || 300000;
    this.apiToken = options.apiToken;
  }

  setProvider(provider) {
    if (typeof provider === "string") {
      const normalizedHostname = String(provider).replace(/^(http:\/\/|https:\/\/)/, "");
      this.credentials = provider.startsWith("https://") ? _grpc.default.credentials.createSsl(Buffer.from(_rootCerts.ROOT_CERTS)) : _grpc.default.credentials.createInsecure(); // @ts-ignore

      this.client = new iotexapi.APIService(normalizedHostname, this.credentials, null);
    } else {
      const origin = provider;
      this.client = origin.client;
    }
  }

  getDeadline() {
    return new Date(Date.now() + this.timeout).getTime();
  }

  getMetadata() {
    const metadata = new _grpc.default.Metadata();
    metadata.add("deadline", this.getDeadline().toString());

    if (this.apiToken) {
      metadata.add("authorization", `bearer ${this.apiToken}`);
    }

    return metadata;
  }

  async getAccount(req) {
    const getAccount = (0, _util.promisify)(this.client.getAccount.bind(this.client)); // @ts-ignore

    return getAccount(req, this.getMetadata());
  }

  async getBlockMetas(req) {
    const getBlockMetas = (0, _util.promisify)(this.client.getBlockMetas.bind(this.client)); // @ts-ignore

    return getBlockMetas(req, this.getMetadata());
  }

  async getChainMeta(req) {
    const getChainMeta = (0, _util.promisify)(this.client.getChainMeta.bind(this.client)); // @ts-ignore

    return getChainMeta(req, this.getMetadata());
  }

  async getServerMeta(req) {
    const getServerMeta = (0, _util.promisify)(this.client.getServerMeta.bind(this.client)); // @ts-ignore

    return getServerMeta(req, this.getMetadata());
  }

  async getActions(req) {
    const getActions = (0, _util.promisify)(this.client.getActions.bind(this.client)); // @ts-ignore

    return getActions(req, this.getMetadata());
  }

  async suggestGasPrice(req) {
    const suggestGasPrice = (0, _util.promisify)(this.client.suggestGasPrice.bind(this.client)); // @ts-ignore

    return suggestGasPrice(req, this.getMetadata());
  }

  async getReceiptByAction(req) {
    const getReceiptByAction = (0, _util.promisify)(this.client.getReceiptByAction.bind(this.client)); // @ts-ignore

    return getReceiptByAction(req, this.getMetadata());
  }

  async readContract(req) {
    const readContract = (0, _util.promisify)(this.client.readContract.bind(this.client)); // @ts-ignore

    return readContract(req, this.getMetadata());
  }

  async sendAction(req) {
    const sendAction = (0, _util.promisify)(this.client.sendAction.bind(this.client)); // @ts-ignore

    return sendAction(req, this.getMetadata());
  }

  async estimateGasForAction(req) {
    const estimateGasForAction = (0, _util.promisify)(this.client.estimateGasForAction.bind(this.client)); // @ts-ignore

    return estimateGasForAction(req, this.getMetadata());
  }

  async readState(req) {
    const readState = (0, _util.promisify)(this.client.readState.bind(this.client)); // @ts-ignore

    return readState(req, this.getMetadata());
  }

  async getEpochMeta(req) {
    const getEpochMeta = (0, _util.promisify)(this.client.getEpochMeta.bind(this.client)); // @ts-ignore

    return getEpochMeta(req, this.getMetadata());
  }

  async getLogs(req) {
    const getLogs = (0, _util.promisify)(this.client.getLogs.bind(this.client)); // @ts-ignore

    return getLogs(req, this.getMetadata());
  }

  async estimateActionGasConsumption(req) {
    const estimateActionGasConsumption = (0, _util.promisify)(this.client.estimateActionGasConsumption.bind(this.client)); // @ts-ignore

    return estimateActionGasConsumption(req, this.getMetadata());
  }

  streamBlocks(req) {
    // @ts-ignore
    return this.client.streamBlocks(req, this.getMetadata());
  }

  streamLogs(req) {
    // @ts-ignore
    return this.client.streamLogs(req, this.getMetadata());
  }

}

exports.default = RpcMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,