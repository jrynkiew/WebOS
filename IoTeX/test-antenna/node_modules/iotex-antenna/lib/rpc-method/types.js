"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toActionTransfer = toActionTransfer;
exports.toTimestamp = toTimestamp;
exports.toActionExecution = toActionExecution;
exports.toActionStartSubChain = toActionStartSubChain;
exports.toActionStopSubChain = toActionStopSubChain;
exports.toActionPutBlock = toActionPutBlock;
exports.toActionCreateDeposit = toActionCreateDeposit;
exports.toActionSettleDeposit = toActionSettleDeposit;
exports.toActionCreatePlumChain = toActionCreatePlumChain;
exports.toActionTerminatePlumChain = toActionTerminatePlumChain;
exports.toActionPlumPutBlock = toActionPlumPutBlock;
exports.toActionPlumCreateDeposit = toActionPlumCreateDeposit;
exports.toActionPlumStartExit = toActionPlumStartExit;
exports.toActionPlumChallengeExit = toActionPlumChallengeExit;
exports.toActionPlumResponseChallengeExit = toActionPlumResponseChallengeExit;
exports.toActionPlumFinalizeExit = toActionPlumFinalizeExit;
exports.toActionPlumSettleDeposit = toActionPlumSettleDeposit;
exports.toActionPlumTransfer = toActionPlumTransfer;
exports.toActionDepositToRewardingFund = toActionDepositToRewardingFund;
exports.toActionClaimFromRewardingFund = toActionClaimFromRewardingFund;
exports.toActionGrantReward = toActionGrantReward;
exports.toActionStakeCreate = toActionStakeCreate;
exports.toActionStakeReclaim = toActionStakeReclaim;
exports.toActionStakeAddDeposit = toActionStakeAddDeposit;
exports.toActionStakeRestake = toActionStakeRestake;
exports.toActionStakeChangeCandidate = toActionStakeChangeCandidate;
exports.toActionStakeTransferOwnership = toActionStakeTransferOwnership;
exports.toActionCandidateRegister = toActionCandidateRegister;
exports.toActionCandidateBasicInfo = toActionCandidateBasicInfo;
exports.toAction = toAction;
exports.fromPbReceipt = fromPbReceipt;
exports.IReadStakingDataRequestToBuffer = exports.IReadStakingDataMethodToBuffer = exports.ClientReadableStream = exports.StreamLogsRequest = exports.StreamBlocksRequest = exports.EstimateActionGasConsumptionRequest = exports.GetLogsRequest = exports.GetEpochMetaRequest = exports.ReadStateRequest = exports.EstimateGasForActionRequest = exports.SendActionResponse = exports.SendActionRequest = exports.ReadContractRequest = exports.GetReceiptByActionRequest = exports.ReceiptStatus = exports.SuggestGasPriceRequest = exports.GetActionsRequest = exports.IReadStakingDataMethodName = exports.GetBlockMetasRequest = exports.GetServerMetaRequest = exports.GetChainMetaRequest = exports.GetAccountRequest = void 0;

var _events = require("events");

var _timestamp_pb = require("google-protobuf/google/protobuf/timestamp_pb");

var _api_pb = _interopRequireDefault(require("../../protogen/proto/api/api_pb"));

var _read_state_pb = require("../../protogen/proto/api/read_state_pb");

var _action_pb = _interopRequireDefault(require("../../protogen/proto/types/action_pb"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const GetAccountRequest = {
  to(req) {
    const pbReq = new _api_pb.default.GetAccountRequest();
    pbReq.setAddress(req.address);
    return pbReq;
  },

  from(pbRes) {
    const meta = pbRes.getAccountmeta();

    if (!meta) {
      return {
        accountMeta: undefined,
        blockIdentifier: undefined
      };
    }

    const blockIdentifierPb = pbRes.getBlockidentifier();
    let blockIdentifier = undefined;

    if (blockIdentifierPb) {
      blockIdentifier = {
        hash: blockIdentifierPb.getHash(),
        height: blockIdentifierPb.getHeight()
      };
    }

    return {
      accountMeta: {
        address: meta.getAddress(),
        balance: meta.getBalance(),
        isContract: meta.getIscontract(),
        nonce: meta.getNonce(),
        pendingNonce: meta.getPendingnonce(),
        numActions: meta.getNumactions(),
        contractByteCode: meta.getContractbytecode()
      },
      blockIdentifier
    };
  }

}; // interface for get chain meta

exports.GetAccountRequest = GetAccountRequest;
const GetChainMetaRequest = {
  // @ts-ignore
  to(req) {
    return new _api_pb.default.GetChainMetaRequest();
  },

  from(pbRes) {
    const meta = pbRes.getChainmeta();
    const res = {
      chainMeta: meta
    };

    if (meta) {
      const epochData = meta.getEpoch();
      res.chainMeta = {
        height: meta.getHeight(),
        numActions: meta.getNumactions(),
        tps: meta.getTps(),
        epoch: {
          num: epochData && epochData.getNum(),
          height: epochData && epochData.getHeight(),
          gravityChainStartHeight: epochData && epochData.getGravitychainstartheight()
        }
      };
    }

    return res;
  }

}; // interface for get server metas

exports.GetChainMetaRequest = GetChainMetaRequest;
// @ts-ignore
const GetServerMetaRequest = {
  // @ts-ignore
  to(req) {
    return new _api_pb.default.GetServerMetaRequest();
  },

  from(pbRes) {
    const meta = pbRes.getServermeta();

    if (!meta) {
      return {
        serverMeta: undefined
      };
    }

    return {
      serverMeta: {
        packageVersion: meta.getPackageversion(),
        packageCommitID: meta.getPackagecommitid(),
        gitStatus: meta.getGitstatus(),
        goVersion: meta.getGoversion(),
        buildTime: meta.getBuildtime()
      }
    };
  }

}; // interface for get block metas
// Properties of a GetBlockMetasByIndexRequest.

exports.GetServerMetaRequest = GetServerMetaRequest;
const GetBlockMetasRequest = {
  to(req) {
    const pbReq = new _api_pb.default.GetBlockMetasRequest();

    if (req.byIndex) {
      const pbReqByIndex = new _api_pb.default.GetBlockMetasByIndexRequest();

      if (req.byIndex.start) {
        pbReqByIndex.setStart(req.byIndex.start);
      }

      if (req.byIndex.count) {
        pbReqByIndex.setCount(req.byIndex.count);
      }

      pbReq.setByindex(pbReqByIndex);
    } else if (req.byHash) {
      const pbReqByHash = new _api_pb.default.GetBlockMetaByHashRequest();
      pbReqByHash.setBlkhash(req.byHash.blkHash);
      pbReq.setByhash(pbReqByHash);
    }

    return pbReq;
  },

  from(pbRes) {
    const metas = pbRes.getBlkmetasList();
    const res = {
      blkMetas: metas,
      total: pbRes.getTotal()
    };

    if (metas) {
      const parsedMetas = [];

      for (let i = 0; i < metas.length; i++) {
        parsedMetas[i] = {
          hash: metas[i].getHash(),
          height: metas[i].getHeight(),
          timestamp: metas[i].getTimestamp(),
          numActions: metas[i].getNumactions(),
          producerAddress: metas[i].getProduceraddress(),
          transferAmount: metas[i].getTransferamount(),
          txRoot: metas[i].getTxroot(),
          receiptRoot: metas[i].getReceiptroot(),
          deltaStateDigest: metas[i].getDeltastatedigest(),
          gasLimit: metas[i].getGasLimit(),
          gasUsed: metas[i].getGasUsed()
        };
      }

      res.blkMetas = parsedMetas;
    }

    return res;
  }

}; // interface for get actions
// Properties of a GetActionsByIndexRequest.

exports.GetBlockMetasRequest = GetBlockMetasRequest;
let IReadStakingDataMethodName;
exports.IReadStakingDataMethodName = IReadStakingDataMethodName;

(function (IReadStakingDataMethodName) {
  IReadStakingDataMethodName[IReadStakingDataMethodName["INVALID"] = 0] = "INVALID";
  IReadStakingDataMethodName[IReadStakingDataMethodName["BUCKETS"] = 1] = "BUCKETS";
  IReadStakingDataMethodName[IReadStakingDataMethodName["BUCKETS_BY_VOTER"] = 2] = "BUCKETS_BY_VOTER";
  IReadStakingDataMethodName[IReadStakingDataMethodName["BUCKETS_BY_CANDIDATE"] = 3] = "BUCKETS_BY_CANDIDATE";
  IReadStakingDataMethodName[IReadStakingDataMethodName["CANDIDATES"] = 4] = "CANDIDATES";
  IReadStakingDataMethodName[IReadStakingDataMethodName["CANDIDATE_BY_NAME"] = 5] = "CANDIDATE_BY_NAME";
  IReadStakingDataMethodName[IReadStakingDataMethodName["BUCKETS_BY_INDEXES"] = 6] = "BUCKETS_BY_INDEXES";
  IReadStakingDataMethodName[IReadStakingDataMethodName["CANDIDATE_BY_ADDRESS"] = 7] = "CANDIDATE_BY_ADDRESS";
  IReadStakingDataMethodName[IReadStakingDataMethodName["TOTAL_STAKING_AMOUNT"] = 8] = "TOTAL_STAKING_AMOUNT";
  IReadStakingDataMethodName[IReadStakingDataMethodName["BUCKETS_COUNT"] = 9] = "BUCKETS_COUNT";
})(IReadStakingDataMethodName || (exports.IReadStakingDataMethodName = IReadStakingDataMethodName = {}));

function toActionTransfer(req) {
  if (!req) {
    return undefined;
  }

  const pbTransfer = new _action_pb.default.Transfer();
  pbTransfer.setAmount(req.amount);
  pbTransfer.setRecipient(req.recipient);
  pbTransfer.setPayload(req.payload);
  return pbTransfer;
}

function toTimestamp(timestamp) {
  const ts = new _timestamp_pb.Timestamp();

  if (timestamp) {
    ts.setSeconds(timestamp.seconds);
    ts.setNanos(timestamp.nanos);
  }

  return ts;
}

function toActionExecution(req) {
  if (!req) {
    return undefined;
  }

  const pbExecution = new _action_pb.default.Execution();
  pbExecution.setAmount(req.amount);
  pbExecution.setContract(req.contract);
  pbExecution.setData(req.data);
  return pbExecution;
}

function toActionStartSubChain(req) {
  if (!req) {
    return undefined;
  }

  const pbStartSubChain = new _action_pb.default.StartSubChain();
  pbStartSubChain.setChainid(req.chainID);
  pbStartSubChain.setSecuritydeposit(req.securityDeposit);
  pbStartSubChain.setOperationdeposit(req.operationDeposit);
  pbStartSubChain.setStartheight(req.startHeight);
  pbStartSubChain.setParentheightoffset(req.parentHeightOffset);
  return pbStartSubChain;
}

function toActionStopSubChain(req) {
  if (!req) {
    return undefined;
  }

  const pbStopSubChain = new _action_pb.default.StopSubChain(); // @ts-ignore

  pbStopSubChain.setChainid(req.chainID); // @ts-ignore

  pbStopSubChain.setStopheight(req.stopHeight); // @ts-ignore

  pbStopSubChain.setSubchainaddress(req.subChainAddress);
  return pbStopSubChain;
}

function toActionPutBlock(req) {
  if (!req) {
    return undefined;
  }

  const roots = req.roots;
  const rootList = [];

  if (req.roots && roots) {
    for (let i = 0; i < req.roots.length; i++) {
      const rootItem = req.roots && req.roots[i];
      const mkroot = new _action_pb.default.MerkleRoot();
      mkroot.setName(rootItem.name);
      mkroot.setValue(rootItem.value);
      rootList[i] = mkroot;
    }
  }

  const pbPutBlock = new _action_pb.default.PutBlock();
  pbPutBlock.setSubchainaddress(req.subChainAddress);
  pbPutBlock.setHeight(req.height);
  pbPutBlock.setRootsList(rootList);
  return pbPutBlock;
}

function toActionCreateDeposit(req) {
  if (!req) {
    return undefined;
  }

  const pbCreateDeposit = new _action_pb.default.CreateDeposit();
  pbCreateDeposit.setChainid(req.chainID);
  pbCreateDeposit.setAmount(req.amount);
  pbCreateDeposit.setRecipient(req.recipient);
  return pbCreateDeposit;
}

function toActionSettleDeposit(req) {
  if (!req) {
    return undefined;
  }

  const pbSettleDeposit = new _action_pb.default.SettleDeposit();
  pbSettleDeposit.setAmount(req.amount);
  pbSettleDeposit.setRecipient(req.recipient);
  pbSettleDeposit.setIndex(req.index);
  return pbSettleDeposit;
}

function toActionCreatePlumChain(req) {
  if (!req) {
    return undefined;
  }

  return new _action_pb.default.CreatePlumChain();
}

function toActionTerminatePlumChain(req) {
  if (!req) {
    return undefined;
  }

  const pbTerminatePlumChain = new _action_pb.default.TerminatePlumChain();
  pbTerminatePlumChain.setSubchainaddress(req.subChainAddress);
  return pbTerminatePlumChain;
}

function toActionPlumPutBlock(req) {
  if (!req) {
    return undefined;
  }

  const pbPlumPutBlock = new _action_pb.default.PlumPutBlock();
  pbPlumPutBlock.setSubchainaddress(req.subChainAddress);
  pbPlumPutBlock.setHeight(req.height);
  return pbPlumPutBlock;
}

function toActionPlumCreateDeposit(req) {
  if (!req) {
    return undefined;
  }

  const pbPlumCreateDeposit = new _action_pb.default.PlumCreateDeposit(); // @ts-ignore

  pbPlumCreateDeposit.setSubchainaddress(req.subChainAddress); // @ts-ignore

  pbPlumCreateDeposit.setAmount(req.amount); // @ts-ignore

  pbPlumCreateDeposit.setRecipient(req.recipient);
  return pbPlumCreateDeposit;
}

function toActionPlumStartExit(req) {
  if (!req) {
    return undefined;
  }

  const pbPlumStartExit = new _action_pb.default.PlumStartExit();
  pbPlumStartExit.setSubchainaddress(req.subChainAddress);
  pbPlumStartExit.setPrevioustransfer(req.previousTransfer);
  pbPlumStartExit.setPrevioustransferblockproof(req.previousTransferBlockProof);
  pbPlumStartExit.setPrevioustransferblockheight(req.previousTransferBlockHeight);
  pbPlumStartExit.setExittransfer(req.exitTransfer);
  pbPlumStartExit.setExittransferblockproof(req.exitTransferBlockProof);
  pbPlumStartExit.setExittransferblockheight(req.exitTransferBlockHeight);
  return pbPlumStartExit;
}

function toActionPlumChallengeExit(req) {
  if (!req) {
    return undefined;
  }

  const pbPlumChallengeExit = new _action_pb.default.PlumChallengeExit();
  pbPlumChallengeExit.setSubchainaddress(req.subChainAddress);
  pbPlumChallengeExit.setCoinid(req.coinID);
  pbPlumChallengeExit.setChallengetransfer(req.challengeTransfer);
  pbPlumChallengeExit.setChallengetransferblockproof(req.challengeTransferBlockProof);
  pbPlumChallengeExit.setChallengetransferblockheight(req.challengeTransferBlockHeight);
  return pbPlumChallengeExit;
}

function toActionPlumResponseChallengeExit(req) {
  if (!req) {
    return undefined;
  }

  const pbPlumResponseChallengeExit = new _action_pb.default.PlumResponseChallengeExit();
  pbPlumResponseChallengeExit.setSubchainaddress(req.subChainAddress);
  pbPlumResponseChallengeExit.setCoinid(req.coinID);
  pbPlumResponseChallengeExit.setChallengetransfer(req.challengeTransfer);
  pbPlumResponseChallengeExit.setResponsetransfer(req.responseTransfer);
  pbPlumResponseChallengeExit.setResponsetransferblockproof(req.responseTransferBlockProof);
  return pbPlumResponseChallengeExit;
}

function toActionPlumFinalizeExit(req) {
  if (!req) {
    return undefined;
  }

  const pbPlumFinalizeExit = new _action_pb.default.PlumFinalizeExit();
  pbPlumFinalizeExit.setSubchainaddress(req.subChainAddress);
  pbPlumFinalizeExit.setCoinid(req.coinID);
  return pbPlumFinalizeExit;
}

function toActionPlumSettleDeposit(req) {
  if (!req) {
    return undefined;
  }

  const pbPlumSettleDeposit = new _action_pb.default.PlumSettleDeposit();
  pbPlumSettleDeposit.setCoinid(req.coinID);
  return pbPlumSettleDeposit;
}

function toActionPlumTransfer(req) {
  if (!req) {
    return undefined;
  }

  const pbPlumTransfer = new _action_pb.default.PlumTransfer();
  pbPlumTransfer.setCoinid(req.coinID);
  pbPlumTransfer.setDenomination(req.denomination);
  pbPlumTransfer.setOwner(req.owner);
  pbPlumTransfer.setRecipient(req.recipient);
  return pbPlumTransfer;
}

function toActionDepositToRewardingFund(req) {
  if (!req) {
    return undefined;
  }

  const pbDepositToRewardingFund = new _action_pb.default.DepositToRewardingFund();
  pbDepositToRewardingFund.setAmount(req.amount);
  pbDepositToRewardingFund.setData(req.data);
  return pbDepositToRewardingFund;
}

function toActionClaimFromRewardingFund(req) {
  if (!req) {
    return undefined;
  }

  const pbClaimFromRewardingFund = new _action_pb.default.ClaimFromRewardingFund(); // @ts-ignore

  pbClaimFromRewardingFund.setAmount(req.amount); // @ts-ignore

  pbClaimFromRewardingFund.setData(req.data);
  return pbClaimFromRewardingFund;
}

function toActionGrantReward(req) {
  if (!req) {
    return undefined;
  }

  const pbGrantReward = new _action_pb.default.GrantReward();
  pbGrantReward.setType(req.type);
  return pbGrantReward;
}

function toActionStakeCreate(req) {
  if (!req) {
    return undefined;
  }

  const pbStakeCreate = new _action_pb.default.StakeCreate();
  pbStakeCreate.setCandidatename(req.candidateName);
  pbStakeCreate.setStakedamount(req.stakedAmount);
  pbStakeCreate.setStakedduration(req.stakedDuration);
  pbStakeCreate.setAutostake(req.autoStake);
  pbStakeCreate.setPayload(req.payload);
  return pbStakeCreate;
}

function toActionStakeReclaim(req) {
  if (!req) {
    return undefined;
  }

  const pbStakeReclaim = new _action_pb.default.StakeReclaim();
  pbStakeReclaim.setBucketindex(req.bucketIndex);
  pbStakeReclaim.setPayload(req.payload);
  return pbStakeReclaim;
}

function toActionStakeAddDeposit(req) {
  if (!req) {
    return undefined;
  }

  const pbStakeAddDeposit = new _action_pb.default.StakeAddDeposit();
  pbStakeAddDeposit.setBucketindex(req.bucketIndex);
  pbStakeAddDeposit.setAmount(req.amount);
  pbStakeAddDeposit.setPayload(req.payload);
  return pbStakeAddDeposit;
}

function toActionStakeRestake(req) {
  if (!req) {
    return undefined;
  }

  const pbStakeRestake = new _action_pb.default.StakeRestake();
  pbStakeRestake.setBucketindex(req.bucketIndex);
  pbStakeRestake.setStakedduration(req.stakedDuration);
  pbStakeRestake.setAutostake(req.autoStake);
  pbStakeRestake.setPayload(req.payload);
  return pbStakeRestake;
}

function toActionStakeChangeCandidate(req) {
  if (!req) {
    return undefined;
  }

  const pbStakeChangeCandidate = new _action_pb.default.StakeChangeCandidate();
  pbStakeChangeCandidate.setBucketindex(req.bucketIndex);
  pbStakeChangeCandidate.setCandidatename(req.candidateName);
  pbStakeChangeCandidate.setPayload(req.payload);
  return pbStakeChangeCandidate;
}

function toActionStakeTransferOwnership(req) {
  if (!req) {
    return undefined;
  }

  const pbStakeTransferOwnership = new _action_pb.default.StakeTransferOwnership();
  pbStakeTransferOwnership.setBucketindex(req.bucketIndex);
  pbStakeTransferOwnership.setVoteraddress(req.voterAddress);
  pbStakeTransferOwnership.setPayload(req.payload);
  return pbStakeTransferOwnership;
}

function toActionCandidateRegister(req) {
  if (!req) {
    return undefined;
  }

  const pbCandidateRegister = new _action_pb.default.CandidateRegister();
  const pbCandidateBasicInfo = new _action_pb.default.CandidateBasicInfo();
  pbCandidateBasicInfo.setName(req.candidate.name);
  pbCandidateBasicInfo.setOperatoraddress(req.candidate.operatorAddress);
  pbCandidateBasicInfo.setRewardaddress(req.candidate.rewardAddress);
  pbCandidateRegister.setCandidate(pbCandidateBasicInfo);
  pbCandidateRegister.setStakedamount(req.stakedAmount);
  pbCandidateRegister.setStakedduration(req.stakedDuration);
  pbCandidateRegister.setAutostake(req.autoStake);
  pbCandidateRegister.setOwneraddress(req.ownerAddress);
  pbCandidateRegister.setPayload(req.payload);
  return pbCandidateRegister;
}

function toActionCandidateBasicInfo(req) {
  if (!req) {
    return undefined;
  }

  const pbCandidateBasicInfo = new _action_pb.default.CandidateBasicInfo();
  pbCandidateBasicInfo.setName(req.name);
  pbCandidateBasicInfo.setOperatoraddress(req.operatorAddress);
  pbCandidateBasicInfo.setRewardaddress(req.rewardAddress);
  return pbCandidateBasicInfo;
}

function toAction(req) {
  const pbActionCore = new _action_pb.default.ActionCore();
  const core = req && req.core;

  if (core) {
    pbActionCore.setVersion(core.version);
    pbActionCore.setNonce(Number(core.nonce));
    pbActionCore.setGaslimit(Number(core.gasLimit));
    pbActionCore.setGasprice(core.gasPrice);
    pbActionCore.setChainid(core.chainID);
    pbActionCore.setTransfer(toActionTransfer(core.transfer));
    pbActionCore.setExecution(toActionExecution(core.execution));
    pbActionCore.setStartsubchain(toActionStartSubChain(core.startSubChain));
    pbActionCore.setStopsubchain(toActionStopSubChain(core.stopSubChain));
    pbActionCore.setPutblock(toActionPutBlock(core.putBlock));
    pbActionCore.setCreatedeposit(toActionCreateDeposit(core.createDeposit));
    pbActionCore.setSettledeposit(toActionSettleDeposit(core.settleDeposit));
    pbActionCore.setCreateplumchain(toActionCreatePlumChain(core.createPlumChain));
    pbActionCore.setTerminateplumchain(toActionTerminatePlumChain(core.terminatePlumChain));
    pbActionCore.setPlumputblock(toActionPlumPutBlock(core.plumPutBlock));
    pbActionCore.setPlumcreatedeposit(toActionPlumCreateDeposit(core.plumCreateDeposit));
    pbActionCore.setPlumstartexit(toActionPlumStartExit(core.plumStartExit));
    pbActionCore.setPlumchallengeexit(toActionPlumChallengeExit(core.plumChallengeExit));
    pbActionCore.setPlumresponsechallengeexit(toActionPlumResponseChallengeExit(core.plumResponseChallengeExit));
    pbActionCore.setPlumfinalizeexit(toActionPlumFinalizeExit(core.plumFinalizeExit));
    pbActionCore.setPlumsettledeposit(toActionPlumSettleDeposit(core.plumSettleDeposit));
    pbActionCore.setPlumtransfer(toActionPlumTransfer(core.plumTransfer));
    pbActionCore.setDeposittorewardingfund(toActionDepositToRewardingFund(core.depositToRewardingFund));
    pbActionCore.setClaimfromrewardingfund(toActionClaimFromRewardingFund(core.claimFromRewardingFund));
    pbActionCore.setGrantreward(toActionGrantReward(core.grantReward));
    pbActionCore.setStakecreate(toActionStakeCreate(core.stakeCreate));
    pbActionCore.setStakeunstake(toActionStakeReclaim(core.stakeUnstake));
    pbActionCore.setStakewithdraw(toActionStakeReclaim(core.stakeWithdraw));
    pbActionCore.setStakeadddeposit(toActionStakeAddDeposit(core.stakeAddDeposit));
    pbActionCore.setStakerestake(toActionStakeRestake(core.stakeRestake));
    pbActionCore.setStakechangecandidate(toActionStakeChangeCandidate(core.stakeChangeCandidate));
    pbActionCore.setStaketransferownership(toActionStakeTransferOwnership(core.stakeTransferOwnership));
    pbActionCore.setCandidateregister(toActionCandidateRegister(core.candidateRegister));
    pbActionCore.setCandidateupdate(toActionCandidateBasicInfo(core.candidateUpdate));
  }

  const pbAction = new _action_pb.default.Action();
  pbAction.setCore(pbActionCore);

  if (req.senderPubKey) {
    pbAction.setSenderpubkey(req.senderPubKey);
  }

  if (req.signature) {
    pbAction.setSignature(req.signature);
  }

  if (req.encoding) pbAction.setEncoding(req.encoding);
  return pbAction;
}

const GetActionsRequest = {
  byAddrTo(byAddr) {
    const pbReqByAddr = new _api_pb.default.GetActionsByAddressRequest();

    if (byAddr.address) {
      pbReqByAddr.setAddress(byAddr.address);
    }

    if (byAddr.start) {
      pbReqByAddr.setStart(byAddr.start);
    }

    if (byAddr.count) {
      pbReqByAddr.setCount(byAddr.count);
    }

    return pbReqByAddr;
  },

  byBlkTo(byBlk) {
    const pbReqByBlk = new _api_pb.default.GetActionsByBlockRequest();

    if (byBlk.blkHash) {
      pbReqByBlk.setBlkhash(byBlk.blkHash);
    }

    if (byBlk.start) {
      pbReqByBlk.setStart(byBlk.start);
    }

    if (byBlk.count) {
      pbReqByBlk.setCount(byBlk.count);
    }

    return pbReqByBlk;
  },

  byHashTo(byHash) {
    const pbReqByHash = new _api_pb.default.GetActionByHashRequest();

    if (byHash.actionHash) {
      pbReqByHash.setActionhash(byHash.actionHash);
    }

    if (byHash.checkingPending) {
      pbReqByHash.setCheckpending(byHash.checkingPending);
    }

    return pbReqByHash;
  },

  byIndexTo(byIndex) {
    const pbReqByIndex = new _api_pb.default.GetActionsByIndexRequest();

    if (byIndex.start) {
      pbReqByIndex.setStart(byIndex.start);
    }

    if (byIndex.count) {
      pbReqByIndex.setCount(byIndex.count);
    }

    return pbReqByIndex;
  },

  unconfirmedByAddrTo(unconfirmedByAddr) {
    const pbReqUnconfirmedByAddr = new _api_pb.default.GetUnconfirmedActionsByAddressRequest();

    if (unconfirmedByAddr.start) {
      pbReqUnconfirmedByAddr.setStart(unconfirmedByAddr.start);
    }

    if (unconfirmedByAddr.count) {
      pbReqUnconfirmedByAddr.setCount(unconfirmedByAddr.count);
    }

    if (unconfirmedByAddr.address) {
      pbReqUnconfirmedByAddr.setAddress(unconfirmedByAddr.address);
    }

    return pbReqUnconfirmedByAddr;
  },

  to(req) {
    const pbReq = new _api_pb.default.GetActionsRequest();

    if (req.byAddr) {
      pbReq.setByaddr(GetActionsRequest.byAddrTo(req.byAddr));
    }

    if (req.byBlk) {
      pbReq.setByblk(GetActionsRequest.byBlkTo(req.byBlk));
    }

    if (req.byHash) {
      pbReq.setByhash(GetActionsRequest.byHashTo(req.byHash));
    }

    if (req.byIndex) {
      pbReq.setByindex(GetActionsRequest.byIndexTo(req.byIndex));
    }

    if (req.unconfirmedByAddr) {
      pbReq.setUnconfirmedbyaddr(GetActionsRequest.unconfirmedByAddrTo(req.unconfirmedByAddr));
    }

    return pbReq;
  },

  fromTransfer(pbRes) {
    let transferData = pbRes;

    if (pbRes) {
      transferData = {
        amount: pbRes.getAmount(),
        recipient: pbRes.getRecipient(),
        payload: pbRes.getPayload()
      };
    }

    return transferData;
  },

  fromVote(pbRes) {
    let voteData = pbRes;

    if (voteData) {
      voteData = {
        timestamp: pbRes.getTimestamp(),
        voteeAddress: pbRes.getVoteeaddress()
      };
    }

    return voteData;
  },

  fromExecution(pbRes) {
    if (!pbRes) {
      return;
    }

    return {
      amount: pbRes.getAmount(),
      contract: pbRes.getContract(),
      // @ts-ignore
      data: Buffer.from(pbRes.getData())
    };
  },

  fromStartSubChain(pbRes) {
    let startSubChainData = pbRes;

    if (startSubChainData) {
      startSubChainData = {
        chainID: pbRes.chainID,
        securityDeposit: pbRes.securityDeposit,
        operationDeposit: pbRes.operationDeposit,
        startHeight: pbRes.startHeight,
        parentHeightOffset: pbRes.parentHeightOffset
      };
    }

    return startSubChainData;
  },

  fromStopSubChain(pbRes) {
    let stopSubChainData = pbRes;

    if (stopSubChainData) {
      stopSubChainData = {
        chainID: pbRes.chainID,
        stopHeight: pbRes.stopHeight,
        subChainAddress: pbRes.subChainAddress
      };
    }

    return stopSubChainData;
  },

  fromPutBlock(pbRes) {
    let putBlockData = pbRes;

    if (putBlockData) {
      const rootsData = pbRes.roots;

      if (rootsData) {
        for (let i = 0; i < pbRes.roots.length; i++) {
          rootsData[i] = {
            name: pbRes.roots[i].name,
            value: pbRes.roots[i].value
          };
        }
      }

      putBlockData = {
        subChainAddress: pbRes.subChainAddress,
        height: pbRes.height,
        roots: rootsData
      };
    }

    return putBlockData;
  },

  fromCreateDeposit(pbRes) {
    let createDepositData = pbRes;

    if (createDepositData) {
      createDepositData = {
        chainID: pbRes.chainID,
        amount: pbRes.amount,
        recipient: pbRes.recipient
      };
    }

    return createDepositData;
  },

  fromSettleDeposit(pbRes) {
    let settleDepositData = pbRes;

    if (settleDepositData) {
      settleDepositData = {
        amount: pbRes.amount,
        recipient: pbRes.recipient,
        index: pbRes.index
      };
    }

    return settleDepositData;
  },

  fromCreatePlumChain(pbRes) {
    let createPlumChainData = pbRes;

    if (createPlumChainData) {
      createPlumChainData = {};
    }

    return createPlumChainData;
  },

  fromTerminatePlumChain(pbRes) {
    let terminatePlumChainData = pbRes;

    if (terminatePlumChainData) {
      terminatePlumChainData = {
        subChainAddress: pbRes.subChainAddress
      };
    }

    return terminatePlumChainData;
  },

  fromPlumPutBlock(pbRes) {
    let plumPutBlockData = pbRes;

    if (plumPutBlockData) {
      plumPutBlockData = {
        subChainAddress: pbRes.subChainAddress,
        height: pbRes.height,
        roots: pbRes.roots
      };
    }

    return plumPutBlockData;
  },

  fromPlumCreateDeposit(pbRes) {
    let plumCreateDepositData = pbRes;

    if (plumCreateDepositData) {
      plumCreateDepositData = {
        subChainAddress: pbRes.subChainAddress,
        amount: pbRes.amount,
        recipient: pbRes.recipient
      };
    }

    return plumCreateDepositData;
  },

  fromPlumStartExit(pbRes) {
    let plumStartExitData = pbRes;

    if (plumStartExitData) {
      plumStartExitData = {
        subChainAddress: pbRes.subChainAddress,
        previousTransfer: pbRes.previousTransfer,
        previousTransferBlockProof: pbRes.previousTransferBlockProof,
        previousTransferBlockHeight: pbRes.previousTransferBlockHeight,
        exitTransfer: pbRes.exitTransfer,
        exitTransferBlockProof: pbRes.exitTransferBlockProof,
        exitTransferBlockHeight: pbRes.exitTransferBlockHeight
      };
    }

    return plumStartExitData;
  },

  fromPlumChallengeExit(pbRes) {
    let plumChallengeExitData = pbRes;

    if (plumChallengeExitData) {
      plumChallengeExitData = {
        subChainAddress: pbRes.subChainAddress,
        coinID: pbRes.coinID,
        challengeTransfer: pbRes.challengeTransfer,
        challengeTransferBlockProof: pbRes.challengeTransferBlockProof,
        challengeTransferBlockHeight: pbRes.challengeTransferBlockHeight
      };
    }

    return plumChallengeExitData;
  },

  fromPlumResponseChallengeExit(pbRes) {
    let plumResponseChallengeExitData = pbRes;

    if (plumResponseChallengeExitData) {
      plumResponseChallengeExitData = {
        subChainAddress: pbRes.subChainAddress,
        coinID: pbRes.coinID,
        challengeTransfer: pbRes.challengeTransfer,
        responseTransfer: pbRes.responseTransfer,
        responseTransferBlockProof: pbRes.responseTransferBlockProof,
        previousTransferBlockHeight: pbRes.previousTransferBlockHeight
      };
    }

    return plumResponseChallengeExitData;
  },

  fromPlumFinalizeExit(pbRes) {
    let plumFinalizeExitData = pbRes;

    if (plumFinalizeExitData) {
      plumFinalizeExitData = {
        subChainAddress: pbRes.subChainAddress,
        coinID: pbRes.coinID
      };
    }

    return plumFinalizeExitData;
  },

  fromPlumSettleDeposit(pbRes) {
    let plumSettleDepositData = pbRes;

    if (plumSettleDepositData) {
      plumSettleDepositData = {
        coinID: pbRes.coinID
      };
    }

    return plumSettleDepositData;
  },

  fromPlumTransfer(pbRes) {
    let plumTransferData = pbRes;

    if (plumTransferData) {
      plumTransferData = {
        coinID: pbRes.coinID,
        denomination: pbRes.denomination,
        owner: pbRes.owner,
        recipient: pbRes.recipient
      };
    }

    return plumTransferData;
  },

  fromDepositToRewardingFund(pbRes) {
    let depositToRewardingFundData = pbRes;

    if (depositToRewardingFundData) {
      depositToRewardingFundData = {
        amount: pbRes.amount,
        data: pbRes.data
      };
    }

    return depositToRewardingFundData;
  },

  fromClaimFromRewardingFund(pbRes) {
    let claimFromRewardingFundData = pbRes;

    if (claimFromRewardingFundData) {
      claimFromRewardingFundData = {
        amount: pbRes.amount,
        data: pbRes.data
      };
    }

    return claimFromRewardingFundData;
  },

  fromSetReward(pbRes) {
    let setRewardData = pbRes;

    if (setRewardData) {
      setRewardData = {
        amount: pbRes.amount,
        data: pbRes.data,
        type: pbRes.type
      };
    }

    return setRewardData;
  },

  fromGrantReward(pbRes) {
    if (!pbRes) {
      return undefined;
    }

    return {
      type: pbRes.getType(),
      height: pbRes.getHeight()
    };
  },

  fromStakeCreate(pbRes) {
    if (!pbRes) {
      return undefined;
    }

    return {
      candidateName: pbRes.getCandidatename(),
      stakedAmount: pbRes.getStakedamount(),
      stakedDuration: pbRes.getStakedduration(),
      autoStake: pbRes.getAutostake(),
      // @ts-ignore
      payload: Buffer.from(pbRes.getPayload())
    };
  },

  fromStakeReclaim(pbRes) {
    if (!pbRes) {
      return undefined;
    }

    return {
      bucketIndex: pbRes.getBucketindex(),
      // @ts-ignore
      payload: Buffer.from(pbRes.getPayload())
    };
  },

  fromStakeAddDeposit(pbRes) {
    if (!pbRes) {
      return undefined;
    }

    return {
      bucketIndex: pbRes.getBucketindex(),
      amount: pbRes.getAmount(),
      // @ts-ignore
      payload: Buffer.from(pbRes.getPayload())
    };
  },

  fromStakeRestake(pbRes) {
    if (!pbRes) {
      return undefined;
    }

    return {
      bucketIndex: pbRes.getBucketindex(),
      stakedDuration: pbRes.getStakedduration(),
      autoStake: pbRes.getAutostake(),
      // @ts-ignore
      payload: Buffer.from(pbRes.getPayload())
    };
  },

  fromStakeChangeCandidate(pbRes) {
    if (!pbRes) {
      return undefined;
    }

    return {
      bucketIndex: pbRes.getBucketindex(),
      candidateName: pbRes.getCandidatename(),
      // @ts-ignore
      payload: Buffer.from(pbRes.getPayload())
    };
  },

  fromStakeTransferOwnership(pbRes) {
    if (!pbRes) {
      return undefined;
    }

    return {
      bucketIndex: pbRes.getBucketindex(),
      voterAddress: pbRes.getVoteraddress(),
      // @ts-ignore
      payload: Buffer.from(pbRes.getPayload())
    };
  },

  fromCandidateRegister(pbRes) {
    if (!pbRes) {
      return undefined;
    }

    return {
      candidate: {
        // @ts-ignore
        name: pbRes.getCandidate().getName(),
        // @ts-ignore
        operatorAddress: pbRes.getCandidate().getOperatoraddress(),
        // @ts-ignore
        rewardAddress: pbRes.getCandidate().getRewardaddress()
      },
      stakedAmount: pbRes.getStakedamount(),
      stakedDuration: pbRes.getStakedduration(),
      autoStake: pbRes.getAutostake(),
      ownerAddress: pbRes.getOwneraddress(),
      // @ts-ignore
      payload: Buffer.from(pbRes.getPayload())
    };
  },

  fromCandidateUpdate(pbRes) {
    if (!pbRes) {
      return undefined;
    }

    return {
      name: pbRes.getName(),
      operatorAddress: pbRes.getOperatoraddress(),
      rewardAddress: pbRes.getRewardaddress()
    };
  },

  getPutPollResult(req) {
    if (!req) {
      return undefined;
    }

    let candidateList;
    const rawCandidates = req.getCandidates();

    if (rawCandidates) {
      candidateList = {
        candidates: []
      };
      const rawCandidatesList = rawCandidates.getCandidatesList();

      if (rawCandidatesList) {
        for (const rawCandidate of rawCandidatesList) {
          candidateList.candidates.push({
            address: rawCandidate.getAddress(),
            votes: rawCandidate.getVotes(),
            pubKey: rawCandidate.getPubkey(),
            rewardAddress: rawCandidate.getRewardaddress()
          });
        }
      }
    }

    return {
      height: req.getHeight(),
      candidates: candidateList
    };
  },

  // tslint:disable-next-line:max-func-body-length
  from(pbRes) {
    const res = {
      actionInfo: []
    };
    const rawActionInfoList = pbRes.getActioninfoList();

    if (!rawActionInfoList) {
      return res;
    }

    for (const rawActionInfo of rawActionInfoList) {
      const actionInfo = {
        actHash: rawActionInfo.getActhash(),
        blkHash: rawActionInfo.getBlkhash(),
        timestamp: rawActionInfo.getTimestamp(),
        index: rawActionInfo.getIndex()
      };
      const rawAction = rawActionInfo.getAction();

      if (rawAction) {
        const rawActionCore = rawAction.getCore();
        let actionCore;

        if (rawActionCore) {
          actionCore = {
            version: rawActionCore.getVersion(),
            nonce: String(rawActionCore.getNonce()),
            gasLimit: String(rawActionCore.getGaslimit()),
            gasPrice: rawActionCore.getGasprice(),
            chainID: rawActionCore.getChainid(),
            transfer: GetActionsRequest.fromTransfer(rawActionCore.getTransfer()),
            execution: GetActionsRequest.fromExecution(rawActionCore.getExecution()),
            startSubChain: GetActionsRequest.fromStartSubChain(rawActionCore.getStartsubchain()),
            stopSubChain: GetActionsRequest.fromStopSubChain(rawActionCore.getStopsubchain()),
            putBlock: GetActionsRequest.fromPutBlock(rawActionCore.getPutblock()),
            createDeposit: GetActionsRequest.fromCreateDeposit(rawActionCore.getCreatedeposit()),
            settleDeposit: GetActionsRequest.fromSettleDeposit(rawActionCore.getSettledeposit()),
            createPlumChain: GetActionsRequest.fromCreatePlumChain(rawActionCore.getCreateplumchain()),
            terminatePlumChain: GetActionsRequest.fromTerminatePlumChain(rawActionCore.getTerminateplumchain()),
            plumPutBlock: GetActionsRequest.fromPlumPutBlock(rawActionCore.getPlumputblock()),
            plumCreateDeposit: GetActionsRequest.fromPlumCreateDeposit(rawActionCore.getPlumcreatedeposit()),
            plumStartExit: GetActionsRequest.fromPlumStartExit(rawActionCore.getPlumstartexit()),
            plumChallengeExit: GetActionsRequest.fromPlumChallengeExit(rawActionCore.getPlumchallengeexit()),
            plumResponseChallengeExit: GetActionsRequest.fromPlumResponseChallengeExit(rawActionCore.getPlumresponsechallengeexit()),
            plumFinalizeExit: GetActionsRequest.fromPlumFinalizeExit(rawActionCore.getPlumfinalizeexit()),
            plumSettleDeposit: GetActionsRequest.fromPlumSettleDeposit(rawActionCore.getPlumsettledeposit()),
            plumTransfer: GetActionsRequest.fromPlumTransfer(rawActionCore.getPlumtransfer()),
            depositToRewardingFund: GetActionsRequest.fromDepositToRewardingFund(rawActionCore.getDeposittorewardingfund()),
            claimFromRewardingFund: GetActionsRequest.fromClaimFromRewardingFund(rawActionCore.getClaimfromrewardingfund()),
            grantReward: GetActionsRequest.fromGrantReward(rawActionCore.getGrantreward()),
            stakeCreate: GetActionsRequest.fromStakeCreate(rawActionCore.getStakecreate()),
            stakeUnstake: GetActionsRequest.fromStakeReclaim(rawActionCore.getStakeunstake()),
            stakeWithdraw: GetActionsRequest.fromStakeReclaim(rawActionCore.getStakewithdraw()),
            stakeAddDeposit: GetActionsRequest.fromStakeAddDeposit(rawActionCore.getStakeadddeposit()),
            stakeRestake: GetActionsRequest.fromStakeRestake(rawActionCore.getStakerestake()),
            stakeChangeCandidate: GetActionsRequest.fromStakeChangeCandidate(rawActionCore.getStakechangecandidate()),
            stakeTransferOwnership: GetActionsRequest.fromStakeTransferOwnership(rawActionCore.getStaketransferownership()),
            candidateRegister: GetActionsRequest.fromCandidateRegister(rawActionCore.getCandidateregister()),
            candidateUpdate: GetActionsRequest.fromCandidateUpdate(rawActionCore.getCandidateupdate()),
            putPollResult: GetActionsRequest.getPutPollResult(rawActionCore.getPutpollresult())
          };
        }

        actionInfo.action = {
          core: actionCore,
          senderPubKey: rawAction.getSenderpubkey(),
          signature: rawAction.getSignature(),
          encoding: rawAction.getEncoding()
        };
      }

      res.actionInfo.push(actionInfo);
    }

    return res;
  }

}; // Properties of a SuggestGasPrice Request.

exports.GetActionsRequest = GetActionsRequest;
const SuggestGasPriceRequest = {
  // @ts-ignore
  to(req) {
    return new _api_pb.default.SuggestGasPriceRequest();
  },

  from(pbRes) {
    const gasPrice = pbRes.getGasprice();
    return {
      gasPrice
    };
  }

}; // Properties of a GetReceiptByActionRequest.

exports.SuggestGasPriceRequest = SuggestGasPriceRequest;
let ReceiptStatus; // Properties of an Receipt.

exports.ReceiptStatus = ReceiptStatus;

(function (ReceiptStatus) {
  ReceiptStatus[ReceiptStatus["Failure"] = 0] = "Failure";
  ReceiptStatus[ReceiptStatus["Success"] = 1] = "Success";
  ReceiptStatus[ReceiptStatus["ErrUnknown"] = 100] = "ErrUnknown";
  ReceiptStatus[ReceiptStatus["ErrOutOfGas"] = 101] = "ErrOutOfGas";
  ReceiptStatus[ReceiptStatus["ErrCodeStoreOutOfGas"] = 102] = "ErrCodeStoreOutOfGas";
  ReceiptStatus[ReceiptStatus["ErrDepth"] = 103] = "ErrDepth";
  ReceiptStatus[ReceiptStatus["ErrContractAddressCollision"] = 104] = "ErrContractAddressCollision";
  ReceiptStatus[ReceiptStatus["ErrNoCompatibleInterpreter"] = 105] = "ErrNoCompatibleInterpreter";
  ReceiptStatus[ReceiptStatus["ErrExecutionReverted"] = 106] = "ErrExecutionReverted";
  ReceiptStatus[ReceiptStatus["ErrMaxCodeSizeExceeded"] = 107] = "ErrMaxCodeSizeExceeded";
  ReceiptStatus[ReceiptStatus["ErrWriteProtection"] = 108] = "ErrWriteProtection";
  ReceiptStatus[ReceiptStatus["ErrLoadAccount"] = 200] = "ErrLoadAccount";
  ReceiptStatus[ReceiptStatus["ErrNotEnoughBalance"] = 201] = "ErrNotEnoughBalance";
  ReceiptStatus[ReceiptStatus["ErrInvalidBucketIndex"] = 202] = "ErrInvalidBucketIndex";
  ReceiptStatus[ReceiptStatus["ErrUnauthorizedOperator"] = 203] = "ErrUnauthorizedOperator";
  ReceiptStatus[ReceiptStatus["ErrInvalidBucketType"] = 204] = "ErrInvalidBucketType";
  ReceiptStatus[ReceiptStatus["ErrCandidateNotExist"] = 205] = "ErrCandidateNotExist";
  ReceiptStatus[ReceiptStatus["ErrReduceDurationBeforeMaturity"] = 206] = "ErrReduceDurationBeforeMaturity";
  ReceiptStatus[ReceiptStatus["ErrUnstakeBeforeMaturity"] = 207] = "ErrUnstakeBeforeMaturity";
  ReceiptStatus[ReceiptStatus["ErrWithdrawBeforeUnstake"] = 208] = "ErrWithdrawBeforeUnstake";
  ReceiptStatus[ReceiptStatus["ErrWithdrawBeforeMaturity"] = 209] = "ErrWithdrawBeforeMaturity";
  ReceiptStatus[ReceiptStatus["ErrCandidateAlreadyExist"] = 210] = "ErrCandidateAlreadyExist";
  ReceiptStatus[ReceiptStatus["ErrCandidateConflict"] = 211] = "ErrCandidateConflict";
})(ReceiptStatus || (exports.ReceiptStatus = ReceiptStatus = {}));

function fromPbReceiptInfo(pbReceiptInfo) {
  if (!pbReceiptInfo) {
    return undefined;
  }

  return {
    receipt: fromPbReceipt(pbReceiptInfo.getReceipt()),
    blkHash: pbReceiptInfo.getBlkhash()
  };
}

const GetReceiptByActionRequest = {
  to(req) {
    const pbReq = new _api_pb.default.GetReceiptByActionRequest();

    if (req.actionHash) {
      pbReq.setActionhash(req.actionHash);
    }

    return pbReq;
  },

  from(pbRes) {
    return {
      receiptInfo: fromPbReceiptInfo(pbRes.getReceiptinfo())
    };
  }

};
exports.GetReceiptByActionRequest = GetReceiptByActionRequest;

function fromPbReceipt(pbReceipt) {
  if (!pbReceipt) {
    return undefined;
  }

  return {
    status: pbReceipt.getStatus(),
    blkHeight: pbReceipt.getBlkheight(),
    actHash: pbReceipt.getActhash(),
    gasConsumed: pbReceipt.getGasconsumed(),
    contractAddress: pbReceipt.getContractaddress(),
    logs: fromPbLogList(pbReceipt.getLogsList())
  };
}

function fromPbLogList(pbLogList) {
  if (!pbLogList) {
    return undefined;
  }

  const res = [];

  for (const log of pbLogList) {
    res.push({
      contractAddress: log.getContractaddress(),
      topics: log.getTopicsList(),
      data: log.getData(),
      blkHeight: log.getBlkheight(),
      actHash: log.getActhash(),
      index: log.getIndex(),
      blkHash: log.getBlkhash()
    });
  }

  return res;
} // Properties of a ReadContractRequest.


const ReadContractRequest = {
  to(req) {
    const pbReq = new _api_pb.default.ReadContractRequest();
    pbReq.setCalleraddress(req.callerAddress);

    if (req.execution) {
      pbReq.setExecution(toActionExecution(req.execution));
    }

    return pbReq;
  },

  from(pbRes) {
    return {
      data: pbRes.getData(),
      receipt: fromPbReceipt(pbRes.getReceipt())
    };
  }

}; // Properties of a SendActionRequest.

exports.ReadContractRequest = ReadContractRequest;
const SendActionRequest = {
  to(req) {
    const pbReq = new _api_pb.default.SendActionRequest();

    if (req.action) {
      pbReq.setAction(toAction(req.action));
    }

    return pbReq;
  }

};
exports.SendActionRequest = SendActionRequest;
const SendActionResponse = {
  from(resp) {
    return {
      actionHash: resp.getActionhash()
    };
  }

}; // Properties of a EstimateGasForActionRequest.

exports.SendActionResponse = SendActionResponse;
const EstimateGasForActionRequest = {
  to(req) {
    const pbReq = new _api_pb.default.EstimateGasForActionRequest();

    if (req.action) {
      pbReq.setAction(toAction(req.action));
    }

    return pbReq;
  },

  from(pbRes) {
    return {
      gas: pbRes.getGas()
    };
  }

};
exports.EstimateGasForActionRequest = EstimateGasForActionRequest;
const ReadStateRequest = {
  to(req) {
    const pbReq = new _api_pb.default.ReadStateRequest();
    pbReq.setProtocolid(req.protocolID);
    pbReq.setMethodname(req.methodName);
    pbReq.setArgumentsList(req.arguments);
    return pbReq;
  },

  from(pbRes) {
    return {
      data: pbRes.getData()
    };
  }

}; // Properties of a BlockProducerInfo.

exports.ReadStateRequest = ReadStateRequest;
const GetEpochMetaRequest = {
  to(req) {
    const pbReq = new _api_pb.default.GetEpochMetaRequest();

    if (req.epochNumber) {
      pbReq.setEpochnumber(req.epochNumber);
    }

    return pbReq;
  },

  from(pbRes) {
    const epoch = pbRes.getEpochdata();
    const bpInfo = pbRes.getBlockproducersinfoList();
    const res = {
      epochData: {
        num: epoch.getNum(),
        height: epoch.getHeight(),
        gravityChainStartHeight: epoch.getGravitychainstartheight()
      },
      totalBlocks: pbRes.getTotalblocks(),
      blockProducersInfo: bpInfo
    };

    if (bpInfo) {
      const parsedBpinfo = [];

      for (let i = 0; i < bpInfo.length; i++) {
        parsedBpinfo[i] = {
          address: bpInfo[i].getAddress(),
          votes: bpInfo[i].getVotes(),
          active: bpInfo[i].getActive(),
          production: bpInfo[i].getProduction()
        };
      }

      res.blockProducersInfo = parsedBpinfo;
    }

    return res;
  }

};
exports.GetEpochMetaRequest = GetEpochMetaRequest;
const GetLogsRequest = {
  to(req) {
    const pbReq = new _api_pb.default.GetLogsRequest();

    if (req.filter) {
      const filter = new _api_pb.default.LogsFilter();
      filter.setAddressList(req.filter.address);
      const topics = [];

      for (let i = 0; i < req.filter.topics.length; i++) {
        const topic = new _api_pb.default.Topics();
        topic.setTopicList(req.filter.topics[i].topic);
        topics.push(topic);
      }

      filter.setTopicsList(topics);
      pbReq.setFilter(filter);
    }

    if (req.byBlock) {
      const byBlock = new _api_pb.default.GetLogsByBlock();
      byBlock.setBlockhash(req.byBlock.blockHash);
      pbReq.setByblock(byBlock);
    }

    if (req.byRange) {
      const byRange = new _api_pb.default.GetLogsByRange();
      byRange.setFromblock(req.byRange.fromBlock);
      byRange.setToblock(req.byRange.toBlock);
      byRange.setPaginationsize(req.byRange.paginationSize);
      pbReq.setByrange(byRange);
    }

    return pbReq;
  },

  from(pbRes) {
    return {
      logs: fromPbLogList(pbRes.getLogsList())
    };
  }

};
exports.GetLogsRequest = GetLogsRequest;
const EstimateActionGasConsumptionRequest = {
  to(req) {
    const pbReq = new _api_pb.default.EstimateActionGasConsumptionRequest();

    if (req.transfer) {
      pbReq.setTransfer(toActionTransfer(req.transfer));
    }

    if (req.execution) {
      pbReq.setExecution(toActionExecution(req.execution));
    }

    pbReq.setCalleraddress(req.callerAddress);
    return pbReq;
  },

  from(pbRes) {
    return {
      gas: pbRes.getGas()
    };
  }

};
exports.EstimateActionGasConsumptionRequest = EstimateActionGasConsumptionRequest;

function fromPbTimestamp(timestamp) {
  if (timestamp) {
    return {
      seconds: timestamp.getSeconds(),
      nanos: timestamp.getNanos()
    };
  }

  return undefined;
}

function fromPbBlockHeaderCore(blockHeaderCore) {
  if (blockHeaderCore) {
    return {
      version: blockHeaderCore.getVersion(),
      height: blockHeaderCore.getHeight(),
      timestamp: fromPbTimestamp(blockHeaderCore.getTimestamp()),
      prevBlockHash: Buffer.from(blockHeaderCore.getPrevblockhash_asU8()),
      txRoot: Buffer.from(blockHeaderCore.getTxroot_asU8()),
      deltaStateDigest: Buffer.from(blockHeaderCore.getDeltastatedigest_asU8()),
      receiptRoot: Buffer.from(blockHeaderCore.getReceiptroot_asU8()),
      logsBloom: Buffer.from(blockHeaderCore.getLogsbloom_asU8())
    };
  }

  return undefined;
}

function fromPbBlockHeader(blockHeader) {
  if (blockHeader) {
    return {
      core: fromPbBlockHeaderCore(blockHeader.getCore()),
      producerPubkey: Buffer.from(blockHeader.getProducerpubkey_asU8()),
      signature: Buffer.from(blockHeader.getSignature_asU8())
    };
  }

  return undefined;
}

function fromPbBlockBody(blockBody) {
  if (blockBody) {
    const res = [];

    for (const rawAction of blockBody.getActionsList()) {
      const rawActionCore = rawAction.getCore();
      let actionCore;

      if (rawActionCore) {
        actionCore = {
          version: rawActionCore.getVersion(),
          nonce: String(rawActionCore.getNonce()),
          gasLimit: String(rawActionCore.getGaslimit()),
          gasPrice: rawActionCore.getGasprice(),
          chainID: rawActionCore.getChainid(),
          transfer: GetActionsRequest.fromTransfer(rawActionCore.getTransfer()),
          execution: GetActionsRequest.fromExecution(rawActionCore.getExecution()),
          startSubChain: GetActionsRequest.fromStartSubChain(rawActionCore.getStartsubchain()),
          stopSubChain: GetActionsRequest.fromStopSubChain(rawActionCore.getStopsubchain()),
          putBlock: GetActionsRequest.fromPutBlock(rawActionCore.getPutblock()),
          createDeposit: GetActionsRequest.fromCreateDeposit(rawActionCore.getCreatedeposit()),
          settleDeposit: GetActionsRequest.fromSettleDeposit(rawActionCore.getSettledeposit()),
          createPlumChain: GetActionsRequest.fromCreatePlumChain(rawActionCore.getCreateplumchain()),
          terminatePlumChain: GetActionsRequest.fromTerminatePlumChain(rawActionCore.getTerminateplumchain()),
          plumPutBlock: GetActionsRequest.fromPlumPutBlock(rawActionCore.getPlumputblock()),
          plumCreateDeposit: GetActionsRequest.fromPlumCreateDeposit(rawActionCore.getPlumcreatedeposit()),
          plumStartExit: GetActionsRequest.fromPlumStartExit(rawActionCore.getPlumstartexit()),
          plumChallengeExit: GetActionsRequest.fromPlumChallengeExit(rawActionCore.getPlumchallengeexit()),
          plumResponseChallengeExit: GetActionsRequest.fromPlumResponseChallengeExit(rawActionCore.getPlumresponsechallengeexit()),
          plumFinalizeExit: GetActionsRequest.fromPlumFinalizeExit(rawActionCore.getPlumfinalizeexit()),
          plumSettleDeposit: GetActionsRequest.fromPlumSettleDeposit(rawActionCore.getPlumsettledeposit()),
          plumTransfer: GetActionsRequest.fromPlumTransfer(rawActionCore.getPlumtransfer()),
          depositToRewardingFund: GetActionsRequest.fromDepositToRewardingFund(rawActionCore.getDeposittorewardingfund()),
          claimFromRewardingFund: GetActionsRequest.fromClaimFromRewardingFund(rawActionCore.getClaimfromrewardingfund()),
          grantReward: GetActionsRequest.fromGrantReward(rawActionCore.getGrantreward()),
          putPollResult: GetActionsRequest.getPutPollResult(rawActionCore.getPutpollresult())
        };
      }

      const action = {
        core: actionCore,
        senderPubKey: rawAction.getSenderpubkey(),
        signature: rawAction.getSignature(),
        encoding: rawAction.getEncoding()
      };
      res.push(action);
    }

    return {
      actions: res
    };
  }

  return undefined;
}

function fromPbEndorsements(endorsements) {
  const res = [];

  for (const endorsement of endorsements) {
    res.push({
      timestamp: fromPbTimestamp(endorsement.getTimestamp()),
      endorser: Buffer.from(endorsement.getEndorser_asU8()),
      signature: Buffer.from(endorsement.getSignature_asU8())
    });
  }

  return res;
}

function fromPbBlockFooter(blockFooter) {
  if (blockFooter) {
    return {
      endorsements: fromPbEndorsements(blockFooter.getEndorsementsList()),
      timestamp: fromPbTimestamp(blockFooter.getTimestamp())
    };
  }

  return undefined;
}

function fromPbBlock(block) {
  if (block) {
    return {
      header: fromPbBlockHeader(block.getHeader()),
      body: fromPbBlockBody(block.getBody()),
      footer: fromPbBlockFooter(block.getFooter())
    };
  }

  return undefined;
}

function fromPbReceipts(receipts) {
  const res = [];

  for (const receipt of receipts) {
    res.push({
      status: receipt.getStatus(),
      blkHeight: receipt.getBlkheight(),
      actHash: receipt.getActhash(),
      gasConsumed: receipt.getGasconsumed(),
      contractAddress: receipt.getContractaddress(),
      logs: fromPbLogList(receipt.getLogsList())
    });
  }

  return res;
}

function fromPbBlockInfo(blockInfo) {
  if (blockInfo) {
    return {
      block: fromPbBlock(blockInfo.getBlock()),
      receipts: fromPbReceipts(blockInfo.getReceiptsList())
    };
  }

  return undefined;
}

const StreamBlocksRequest = {
  // @ts-ignore
  to(req) {
    return new _api_pb.default.StreamBlocksRequest();
  },

  from(pbRes) {
    return {
      block: fromPbBlockInfo(pbRes.getBlock())
    };
  }

};
exports.StreamBlocksRequest = StreamBlocksRequest;
const StreamLogsRequest = {
  // @ts-ignore
  to(req) {
    const pbReq = new _api_pb.default.StreamLogsRequest();

    if (req.filter) {
      const filter = new _api_pb.default.LogsFilter();
      filter.setAddressList(req.filter.address);
      const topics = [];

      for (let i = 0; i < req.filter.topics.length; i++) {
        const topic = new _api_pb.default.Topics();
        topic.setTopicList(req.filter.topics[i].topic);
        topics.push(topic);
      }

      filter.setTopicsList(topics);
      pbReq.setFilter(filter);
    }

    return pbReq;
  },

  fromPbLog(log) {
    if (log) {
      return {
        contractAddress: log.getContractaddress(),
        topics: log.getTopicsList(),
        data: log.getData(),
        blkHeight: log.getBlkheight(),
        actHash: log.getActhash(),
        index: log.getIndex(),
        blkHash: log.getBlkhash()
      };
    }

    return undefined;
  },

  from(pbRes) {
    return {
      log: StreamLogsRequest.fromPbLog(pbRes.getLog())
    };
  }

}; // @ts-ignore

exports.StreamLogsRequest = StreamLogsRequest;

// @ts-ignore
class ClientReadableStream extends _events.EventEmitter {
  constructor(origin, type) {
    super();

    _defineProperty(this, "origin", void 0);

    this.origin = origin;
    origin.on("error", err => {
      this.emit("error", err);
    });
    origin.on("status", status => {
      this.emit("status", status);
    });
    origin.on("data", response => {
      if (type === "StreamBlocks") {
        // @ts-ignore
        this.emit("data", StreamBlocksRequest.from(response));
      }

      if (type === "StreamLogs") {
        // @ts-ignore
        this.emit("data", StreamLogsRequest.from(response));
      }
    });
    origin.on("end", () => {
      this.emit("end");
    });
  }

  cancel() {
    this.origin.cancel();
  }

}

exports.ClientReadableStream = ClientReadableStream;

const IReadStakingDataMethodToBuffer = req => {
  const pbObj = new _read_state_pb.ReadStakingDataMethod();

  switch (req.method.valueOf()) {
    case _read_state_pb.ReadStakingDataMethod.Name.INVALID.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.INVALID);
      break;

    case _read_state_pb.ReadStakingDataMethod.Name.BUCKETS.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.BUCKETS);
      break;

    case _read_state_pb.ReadStakingDataMethod.Name.BUCKETS_BY_VOTER.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.BUCKETS_BY_VOTER);
      break;

    case _read_state_pb.ReadStakingDataMethod.Name.BUCKETS_BY_CANDIDATE.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.BUCKETS_BY_CANDIDATE);
      break;

    case _read_state_pb.ReadStakingDataMethod.Name.CANDIDATES.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.CANDIDATES);
      break;

    case _read_state_pb.ReadStakingDataMethod.Name.CANDIDATE_BY_NAME.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.CANDIDATE_BY_NAME);
      break;

    case _read_state_pb.ReadStakingDataMethod.Name.BUCKETS_BY_INDEXES.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.BUCKETS_BY_INDEXES);
      break;

    case _read_state_pb.ReadStakingDataMethod.Name.CANDIDATE_BY_ADDRESS.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.CANDIDATE_BY_ADDRESS);
      break;

    case _read_state_pb.ReadStakingDataMethod.Name.TOTAL_STAKING_AMOUNT.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.TOTAL_STAKING_AMOUNT);
      break;

    case _read_state_pb.ReadStakingDataMethod.Name.BUCKETS_COUNT.valueOf():
      pbObj.setMethod(_read_state_pb.ReadStakingDataMethod.Name.BUCKETS_COUNT);
      break;

    default:
      throw new Error(`unknow method ${req.method}`);
  }

  return Buffer.from(pbObj.serializeBinary());
};

exports.IReadStakingDataMethodToBuffer = IReadStakingDataMethodToBuffer;

const IReadStakingDataRequestToBuffer = req => {
  const pbObj = new _read_state_pb.ReadStakingDataRequest();

  if (req.buckets) {
    const buckets = new _read_state_pb.ReadStakingDataRequest.VoteBuckets();
    const pagination = new _read_state_pb.PaginationParam();
    pagination.setOffset(req.buckets.pagination.offset);
    pagination.setLimit(req.buckets.pagination.limit);
    buckets.setPagination(pagination);
    pbObj.setBuckets(buckets);
  }

  if (req.bucketsByVoter) {
    const bucketsByVoter = new _read_state_pb.ReadStakingDataRequest.VoteBucketsByVoter();
    const pagination = new _read_state_pb.PaginationParam();
    pagination.setOffset(req.bucketsByVoter.pagination.offset);
    pagination.setLimit(req.bucketsByVoter.pagination.limit);
    bucketsByVoter.setPagination(pagination);
    bucketsByVoter.setVoteraddress(req.bucketsByVoter.voterAddress);
    pbObj.setBucketsbyvoter(bucketsByVoter);
  }

  if (req.bucketsByCandidate) {
    const bucketsByCandidate = new _read_state_pb.ReadStakingDataRequest.VoteBucketsByCandidate();
    const pagination = new _read_state_pb.PaginationParam();
    pagination.setOffset(req.bucketsByCandidate.pagination.offset);
    pagination.setLimit(req.bucketsByCandidate.pagination.limit);
    bucketsByCandidate.setPagination(pagination);
    bucketsByCandidate.setCandname(req.bucketsByCandidate.candName);
    pbObj.setBucketsbycandidate(bucketsByCandidate);
  }

  if (req.candidates) {
    const candidates = new _read_state_pb.ReadStakingDataRequest.Candidates();
    const pagination = new _read_state_pb.PaginationParam();
    pagination.setOffset(req.candidates.pagination.offset);
    pagination.setLimit(req.candidates.pagination.limit);
    candidates.setPagination(pagination);
    pbObj.setCandidates(candidates);
  }

  if (req.candidateByName) {
    const candidateByName = new _read_state_pb.ReadStakingDataRequest.CandidateByName();
    candidateByName.setCandname(req.candidateByName.candName);
    pbObj.setCandidatebyname(candidateByName);
  }

  if (req.bucketsByIndexes) {
    const bucketsByIndexes = new _read_state_pb.ReadStakingDataRequest.VoteBucketsByIndexes();
    bucketsByIndexes.setIndexList(req.bucketsByIndexes.index);
    pbObj.setBucketsbyindexes(bucketsByIndexes);
  }

  if (req.candidateByAddress) {
    const candidateByAddress = new _read_state_pb.ReadStakingDataRequest.CandidateByAddress();
    candidateByAddress.setOwneraddr(req.candidateByAddress.ownerAddr);
    pbObj.setCandidatebyaddress(candidateByAddress);
  }

  if (req.totalStakingAmount) {
    const totalStakingAmount = new _read_state_pb.ReadStakingDataRequest.TotalStakingAmount();
    pbObj.setTotalstakingamount(totalStakingAmount);
  }

  if (req.bucketsCount) {
    const bucketsCount = new _read_state_pb.ReadStakingDataRequest.BucketsCount();
    pbObj.setBucketscount(bucketsCount);
  }

  return Buffer.from(pbObj.serializeBinary());
};

exports.IReadStakingDataRequestToBuffer = IReadStakingDataRequestToBuffer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,