"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Iotx = void 0;

var _account = require("./account/account");

var _accounts = require("./account/accounts");

var _method = require("./action/method");

var _contract = require("./contract/contract");

var _rpcMethod = _interopRequireDefault(require("./rpc-method"));

var _address = require("./crypto/address");

var rlp = _interopRequireWildcard(require("rlp"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _ethereumjsUtil = require("ethereumjs-util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Iotx extends _rpcMethod.default {
  constructor(hostname, opts) {
    super(hostname, {
      timeout: opts && opts.timeout,
      apiToken: opts && opts.apiToken
    });

    _defineProperty(this, "accounts", void 0);

    _defineProperty(this, "signer", void 0);

    this.accounts = new _accounts.Accounts();
    this.signer = opts && opts.signer;
    setTimeout(async () => {
      const signer = this.signer;

      if (signer && signer.getAccounts) {
        try {
          const accounts = await signer.getAccounts();
          accounts.forEach(account => {
            this.accounts.addAccount(new _account.RemoteAccount(account.address, signer));
          });
        } catch (err) {
          throw new Error(`fetch remote accounts address error: ${err}`);
        }
      }
    }, 2000);
  }

  async tryGetAccount(address) {
    const sender = this.signer && this.signer.getAccount ? await this.signer.getAccount(address) : this.accounts.getAccount(address);

    if (!sender) {
      throw new Error(`cannot find account: ${address}`);
    }

    return sender;
  }

  currentProvider() {
    return this.client;
  }

  async sendTransfer(req) {
    const sender = await this.tryGetAccount(req.from);
    const payload = req.payload || "";
    return new _method.TransferMethod(this, sender, {
      gasLimit: req.gasLimit,
      gasPrice: req.gasPrice,
      amount: req.value,
      recipient: req.to,
      payload: payload
    }, {
      signer: this.signer
    }).execute();
  }

  async sendRawTransaction(req) {
    // @ts-ignore
    const tx = rlp.decode(req.data);
    const nonce = new _bignumber.default(`0x${tx[0].toString("hex")}`);
    const gasPrice = new _bignumber.default(`0x${tx[1].toString("hex")}`);
    const gasLimit = new _bignumber.default(`0x${tx[2].toString("hex")}`);
    let to = tx[3].length > 0 ? (0, _address.fromBytes)(tx[3]).string() : "";
    const value = new _bignumber.default(`0x${tx[4].toString("hex")}`);
    const data = tx[5];
    let v = new _bignumber.default(`0x${tx[6].toString("hex")}`);
    v = v.minus(req.chainID * 2 + 8);
    const pad = (0, _ethereumjsUtil.unpadBuffer)((0, _ethereumjsUtil.toBuffer)(0));
    const rawTx = [...tx.slice(0, 6), (0, _ethereumjsUtil.toBuffer)(req.chainID), pad, pad];
    const raw = rlp.encode(rawTx);
    const hash = (0, _ethereumjsUtil.keccakFromHexString)(`0x${raw.toString("hex")}`);
    const vv = (0, _ethereumjsUtil.bufferToInt)(tx[6]);
    const publicKey = (0, _ethereumjsUtil.ecrecover)(hash, vv, tx[7], tx[8], req.chainID);
    const compactPublicKey = Buffer.concat([(0, _ethereumjsUtil.toBuffer)(4), publicKey]);
    const signature = Buffer.concat([(0, _ethereumjsUtil.setLengthLeft)(tx[7], 32), (0, _ethereumjsUtil.setLengthLeft)(tx[8], 32), (0, _ethereumjsUtil.toBuffer)(v.toNumber())]);
    let isContract = true;

    if (to !== "") {
      const account = await this.getAccount({
        address: to
      });

      if (!account.accountMeta) {
        throw new Error(`can't fetch ${to} account info`);
      }

      isContract = account.accountMeta.isContract;
    }

    const sendActionReq = {
      action: {
        core: {
          version: 0,
          nonce: nonce.toString(10),
          gasLimit: gasLimit.toString(10),
          gasPrice: gasPrice.toString(10),
          chainID: 0
        },
        senderPubKey: compactPublicKey,
        signature: signature,
        encoding: 1
      }
    };

    if (!isContract) {
      // @ts-ignore
      sendActionReq.action.core.transfer = {
        amount: value.toString(10),
        recipient: to,
        payload: data
      };
    } else {
      // @ts-ignore
      sendActionReq.action.core.execution = {
        amount: value.toString(10),
        contract: to,
        data: data
      };
    }

    return (await this.sendAction(sendActionReq)).actionHash;
  }

  async estimateGas(req) {
    const to = req.to ? (0, _address.fromBytes)(Buffer.from(req.to.substring(2), "hex")).string() : "";
    let from = "io1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqd39ym7";

    if (req.from) {
      from = (0, _address.fromBytes)(Buffer.from(req.from.substring(2), "hex")).string();
    }

    let isContract = true;

    if (to !== "") {
      const account = await this.getAccount({
        address: to
      });

      if (!account.accountMeta) {
        throw new Error(`can't fetch ${to} account info`);
      }

      isContract = account.accountMeta.isContract;
    }

    const estimateReq = {
      callerAddress: from
    };

    if (!isContract) {
      // @ts-ignore
      estimateReq.transfer = {
        amount: new _bignumber.default(req.value).toString(10),
        recipient: to,
        payload: req.data ? Buffer.from(req.data.substring(2), "hex") : ""
      };
    } else {
      // @ts-ignore
      estimateReq.execution = {
        amount: req.value ? new _bignumber.default(req.value).toString(10) : "0",
        contract: to,
        data: req.data ? Buffer.from(req.data.substring(2), "hex") : ""
      };
    }

    return (await this.estimateActionGasConsumption(estimateReq)).gas;
  } // return action hash


  async deployContract(req, ...args) {
    if (typeof req.abi === "string") {
      try {
        req.abi = JSON.parse(req.abi);
      } catch (e) {
        throw new Error("parse abi to ABIDefinition error");
      }
    }

    const sender = await this.tryGetAccount(req.from); // @ts-ignore

    return new _contract.Contract(req.abi, undefined, {
      data: req.data,
      provider: this,
      signer: this.signer
    }).deploy(sender, args, req.amount, req.gasLimit, req.gasPrice);
  } // return action hash


  async executeContract(req, ...args) {
    if (typeof req.abi === "string") {
      try {
        req.abi = JSON.parse(req.abi);
      } catch (e) {
        throw new Error("parse abi to ABIDefinition error");
      }
    }

    const sender = await this.tryGetAccount(req.from); // @ts-ignore

    const contract = new _contract.Contract(req.abi, req.contractAddress, {
      provider: this,
      signer: this.signer
    });
    return contract.methods[req.method](...args, {
      account: sender,
      amount: req.amount,
      gasLimit: req.gasLimit,
      gasPrice: req.gasPrice
    });
  }

  async readContractByMethod(req, ...args) {
    if (typeof req.abi === "string") {
      try {
        req.abi = JSON.parse(req.abi);
      } catch (e) {
        throw new Error("parse abi to ABIDefinition error");
      }
    } // @ts-ignore


    const contract = new _contract.Contract(req.abi, req.contractAddress, {
      provider: this,
      signer: this.signer
    });
    const result = await this.readContract({
      execution: contract.pureEncodeMethod("0", req.method, ...args),
      callerAddress: req.from
    });
    return contract.decodeMethodResult(req.method, result.data);
  }

  async claimFromRewardingFund(req) {
    const sender = await this.tryGetAccount(req.from);
    return new _method.ClaimFromRewardingFundMethod(this, sender, {
      gasLimit: req.gasLimit,
      gasPrice: req.gasPrice,
      amount: req.amount,
      data: req.data
    }, {
      signer: this.signer
    }).execute();
  }

}

exports.Iotx = Iotx;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,