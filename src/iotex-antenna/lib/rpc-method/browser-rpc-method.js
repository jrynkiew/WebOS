"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _api_grpc_web_pb = _interopRequireDefault(require("../../protogen/proto/api/api_grpc_web_pb"));

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RpcMethod {
  constructor(hostname, options = {}) {
    _defineProperty(this, "client", void 0);

    _defineProperty(this, "timeout", void 0);

    _defineProperty(this, "apiToken", void 0);

    this.client = new _api_grpc_web_pb.default.APIServicePromiseClient(hostname, null, null);
    this.timeout = options.timeout || 300000;
    this.apiToken = options.apiToken;
  }

  setProvider(provider) {
    if (typeof provider === "string") {
      this.client = new _api_grpc_web_pb.default.APIServicePromiseClient(provider, null, null);
    } else {
      const origin = provider;
      this.client = origin.client;
    }
  }

  getDeadline() {
    return `${new Date(Date.now() + this.timeout).getTime()}`;
  }

  getMetadata() {
    if (this.apiToken) {
      return {
        deadline: this.getDeadline(),
        authorization: `bearer ${this.apiToken}`
      };
    }

    return {
      deadline: this.getDeadline()
    };
  }

  async getAccount(req) {
    const pbReq = _types.GetAccountRequest.to(req);

    const pbResp = await this.client.getAccount(pbReq, this.getMetadata());
    return _types.GetAccountRequest.from(pbResp);
  }

  async getBlockMetas(req) {
    const pbReq = _types.GetBlockMetasRequest.to(req);

    const pbResp = await this.client.getBlockMetas(pbReq, this.getMetadata());
    return _types.GetBlockMetasRequest.from(pbResp);
  }

  async getChainMeta(req) {
    const pbReq = _types.GetChainMetaRequest.to(req);

    const pbResp = await this.client.getChainMeta(pbReq, this.getMetadata());
    return _types.GetChainMetaRequest.from(pbResp);
  }

  async getServerMeta(req) {
    const pbReq = _types.GetServerMetaRequest.to(req);

    const pbResp = await this.client.getServerMeta(pbReq, this.getMetadata());
    return _types.GetServerMetaRequest.from(pbResp);
  }

  async getActions(req) {
    const pbReq = _types.GetActionsRequest.to(req);

    const pbResp = await this.client.getActions(pbReq, this.getMetadata());
    return _types.GetActionsRequest.from(pbResp);
  }

  async suggestGasPrice(req) {
    const pbReq = _types.SuggestGasPriceRequest.to(req);

    const pbResp = await this.client.suggestGasPrice(pbReq, this.getMetadata());
    return _types.SuggestGasPriceRequest.from(pbResp);
  }

  async estimateGasForAction(req) {
    const pbReq = _types.EstimateGasForActionRequest.to(req);

    const pbResp = await this.client.estimateGasForAction(pbReq, this.getMetadata());
    return _types.EstimateGasForActionRequest.from(pbResp);
  }

  async readState(req) {
    const pbReq = _types.ReadStateRequest.to(req);

    const pbResp = await this.client.readState(pbReq, this.getMetadata());
    return _types.ReadStateRequest.from(pbResp);
  }

  async readContract(req) {
    const pbReq = _types.ReadContractRequest.to(req);

    const pbResp = await this.client.readContract(pbReq, this.getMetadata());
    return _types.ReadContractRequest.from(pbResp);
  }

  async sendAction(req) {
    const pbReq = _types.SendActionRequest.to(req);

    const pbResp = await this.client.sendAction(pbReq, this.getMetadata());
    return _types.SendActionResponse.from(pbResp);
  }

  async getReceiptByAction(req) {
    const pbReq = _types.GetReceiptByActionRequest.to(req);

    const pbResp = await this.client.getReceiptByAction(pbReq, this.getMetadata());
    return _types.GetReceiptByActionRequest.from(pbResp);
  }

  async getEpochMeta(req) {
    const pbReq = _types.GetEpochMetaRequest.to(req);

    const pbResp = await this.client.getEpochMeta(pbReq, this.getMetadata());
    return _types.GetEpochMetaRequest.from(pbResp);
  }

  async getLogs(req) {
    const pbReq = _types.GetLogsRequest.to(req);

    const pbResp = await this.client.getLogs(pbReq, this.getMetadata());
    return _types.GetLogsRequest.from(pbResp);
  }

  async estimateActionGasConsumption(req) {
    const pbReq = _types.EstimateActionGasConsumptionRequest.to(req);

    const pbResp = await this.client.estimateActionGasConsumption(pbReq, this.getMetadata());
    return _types.EstimateActionGasConsumptionRequest.from(pbResp);
  }

  streamBlocks(req) {
    const pbReq = _types.StreamBlocksRequest.to(req); // @ts-ignore


    const origin = this.client.streamBlocks(pbReq, this.getMetadata());
    return new _types.ClientReadableStream(origin, "StreamBlocks");
  }

  streamLogs(req) {
    const pbReq = _types.StreamLogsRequest.to(req); // @ts-ignore


    const origin = this.client.streamLogs(pbReq, this.getMetadata());
    return new _types.ClientReadableStream(origin, "StreamLogs");
  }

}

exports.default = RpcMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,