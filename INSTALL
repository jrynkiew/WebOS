1. Update system & install build essentials 
sudo apt-get update
sudo apt-get install build-essential (additionally, install python3 manually if it is not installed in this step)

2. Download Libraries
curl -o util-macros-1.19.3.tar.bz2 https://www.x.org/pub/individual/util/util-macros-1.19.3.tar.bz2

//x11 libraries
curl -o xcb-proto-1.14.1.tar.xz https://xorg.freedesktop.org/archive/individual/proto/xcb-proto-1.14.1.tar.xz
curl -o xorgproto-2021.4.tar.bz2 https://www.linuxfromscratch.org/blfs/view/svn/x/xorgproto.html
curl -o libXau-1.0.9.tar.bz2 https://www.x.org/pub/individual/lib/libXau-1.0.9.tar.bz2
curl -o libxcb-1.14.tar.xz https://xorg.freedesktop.org/archive/individual/lib/libxcb-1.14.tar.xz
(http) https://downloads.sourceforge.net/freetype/freetype-doc-2.10.4.tar.xz
curl -o fontconfig-2.13.1.tar.bz2 https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.13.1.tar.bz2 

curl -o libdrm-2.4.106.tar.xz https://dri.freedesktop.org/libdrm/libdrm-2.4.106.tar.xz

//python libs
curl -o MarkupSafe-2.0.1.tar.gz https://files.pythonhosted.org/packages/source/M/MarkupSafe/MarkupSafe-2.0.1.tar.gz
curl -o Mako-1.1.4.tar.gz https://files.pythonhosted.org/packages/source/M/Mako/Mako-1.1.4.tar.gz

//mesa
curl -o mesa-21.1.2.tar.xz https://mesa.freedesktop.org/archive/mesa-21.1.2.tar.xz

//video libraries
curl -o SDL2-2.0.14.tar.gz https://www.libsdl.org/release/SDL2-2.0.14.tar.gz
curl -o SDL2_image-2.0.5.tar.gz https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.5.tar.gz
(http) glew-2.2.0.tgz https://sourceforge.net/projects/glew/files/glew/2.2.0/glew-2.2.0.tgz/download
curl -o glu-9.0.1.tar.xz ftp://ftp.freedesktop.org/pub/mesa/glu/glu-9.0.1.tar.xz
curl -o glfw-3.3.4.zip https://github.com/glfw/glfw/releases/download/3.3.4/glfw-3.3.4.zip
//Additional dependencies
cmake
Libtool
libpng-dev
Emscripten
Curl
Docker

3. Build Xorg
export XORG_PREFIX="<YOUR PATH>" eg. export XORG_PREFIX="/home/jeremi/Coding/Libs/Xorg"

export XORG_CONFIG="--prefix=$XORG_PREFIX --sysconfdir=/etc \
    --localstatedir=/var --disable-static"

cat > /etc/profile.d/xorg.sh << EOF
XORG_PREFIX="$XORG_PREFIX"
XORG_CONFIG="--prefix=\$XORG_PREFIX --sysconfdir=/etc --localstatedir=/var --disable-static"
export XORG_PREFIX XORG_CONFIG
EOF

chmod 644 /etc/profile.d/xorg.sh

run the script as root user

##################################
a. Install util-macros-1.19.3
https://www.linuxfromscratch.org/blfs/view/svn/x/util-macros.html
##################################

	tar -xf util-macros-1.19.3.tar.bz2 -C /home/jeremi/Coding/Libs/util-macros-1.19.3
	./configure $XORG_CONFIG
	sudo make install

##################################
b. Install xcb-proto-1.14.1.tar.xz
https://www.linuxfromscratch.org/blfs/view/svn/x/xcb-proto.html
##################################

	PYTHON=python3 ./configure $XORG_CONFIG
	sudo make install

##################################
c. Install xorgproto-2021.4.tar.bz2
https://www.linuxfromscratch.org/blfs/view/svn/x/xorgproto.html
##################################

	sudo apt install python3-pip
	sudo pip3 install meson
	sudo pip3 install ninja

	mkdir build && cd build && meson --prefix=$XORG_PREFIX -Dlegacy=true .. && ninja
	
	sudo -i

	ninja install && install -vdm 755 $XORG_PREFIX/share/doc/xorgproto && install -vm 644 ../[^m]*.txt ../PM_spec $XORG_PREFIX/share/doc/xorgproto

##################################
d. Install libXau-1.0.9.tar.bz2
https://www.linuxfromscratch.org/blfs/view/svn/x/libXau.html
##################################

	export PKG_CONFIG_PATH="/home/jeremi/Coding/Libs/Xorg/share/pkgconfig:/home/jeremi/Coding/Libs/Xorg/lib/pkgconfig:/usr/lib/pkgconfig"     (or add this to ~/.bashrc environment variables)
	make
	sudo make install

##################################
e. Install libxcb-1.14.tar.xz
https://www.linuxfromscratch.org/blfs/view/svn/x/libxcb.html
##################################

	CFLAGS="${CFLAGS:--O2 -g} -Wno-error=format-extra-args"	PYTHON=python3 ./configure $XORG_CONFIG --without-doxygen --docdir='${datadir}'/doc/libxcb-1.14
	make
	sudo make install

##################################
f. Install freetype-doc-2.10.4.tar.xz
https://www.linuxfromscratch.org/blfs/view/svn/general/freetype2.html
##################################

	sed -ri "s:.*(AUX_MODULES.*valid):\1:" modules.cfg
	sed -r "s:.*(#.*SUBPIXEL_RENDERING) .*:\1:" -i include/freetype/config/ftoption.h
	./configure --prefix=/usr --enable-freetype-config --disable-static
	make
	sudo make install

##################################
g. Install fontconfig-2.13.1.tar.bz2
https://www.linuxfromscratch.org/blfs/view/svn/general/fontconfig.html
##################################
	
	sudo apt install uuid-dev
	sudo apt install gperf
	./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --disable-docs --docdir=/usr/share/doc/fontconfig-2.13.1
	make
	sudo make install

##################################
h. Install libX
https://www.linuxfromscratch.org/blfs/view/svn/x/x7lib.html
##################################

	cat > ~/Documents/download\ libX << "EOF"
		ce2fb8100c6647ee81451ebe388b17ad  xtrans-1.4.0.tar.bz2
		4795a742b3127c1358ce759f76ab5318  libX11-1.7.1.tar.bz2
		f5b48bb76ba327cd2a8dc7a383532a95  libXext-1.3.4.tar.bz2
		4e1196275aa743d6ebd3d3d5ec1dff9c  libFS-1.0.8.tar.bz2
		76d77499ee7120a56566891ca2c0dbcf  libICE-1.0.10.tar.bz2
		87c7fad1c1813517979184c8ccd76628  libSM-1.2.3.tar.bz2
		eeea9d5af3e6c143d0ea1721d27a5e49  libXScrnSaver-1.2.3.tar.bz2
		b122ff9a7ec70c94dbbfd814899fffa5  libXt-1.2.1.tar.bz2
		ac774cff8b493f566088a255dbf91201  libXmu-1.1.3.tar.bz2
		6f0ecf8d103d528cfc803aa475137afa  libXpm-3.5.13.tar.bz2
		c1ce21c296bbf3da3e30cf651649563e  libXaw-1.0.14.tar.bz2
		86f182f487f4f54684ef6b142096bb0f  libXfixes-6.0.0.tar.bz2
		3fa0841ea89024719b20cd702a9b54e0  libXcomposite-0.4.5.tar.bz2
		802179a76bded0b658f4e9ec5e1830a4  libXrender-0.9.10.tar.bz2
		9b9be0e289130fb820aedf67705fc549  libXcursor-1.2.0.tar.bz2
		e3f554267a7a04b042dc1f6352bd6d99  libXdamage-1.1.5.tar.bz2
		6447db6a689fb530c218f0f8328c3abc  libfontenc-1.1.4.tar.bz2
		00516bed7ec1453d56974560379fff2f  libXfont2-2.0.4.tar.bz2
		4a433c24627b4ff60a4dd403a0990796  libXft-2.3.3.tar.bz2
		62c4af0839072024b4b1c8cbe84216c7  libXi-1.7.10.tar.bz2
		0d5f826a197dae74da67af4a9ef35885  libXinerama-1.1.4.tar.bz2
		18f3b20d522f45e4dadd34afb5bea048  libXrandr-1.5.2.tar.bz2
		e142ef0ed0366ae89c771c27cfc2ccd1  libXres-1.2.1.tar.bz2
		ef8c2c1d16a00bd95b9fdcef63b8a2ca  libXtst-1.2.3.tar.bz2
		210b6ef30dda2256d54763136faa37b9  libXv-1.0.11.tar.bz2
		3569ff7f3e26864d986d6a21147eaa58  libXvMC-1.0.12.tar.bz2
		0ddeafc13b33086357cfa96fae41ee8e  libXxf86dga-1.1.5.tar.bz2
		298b8fff82df17304dfdb5fe4066fe3a  libXxf86vm-1.1.4.tar.bz2
		d2f1f0ec68ac3932dd7f1d9aa0a7a11c  libdmx-1.1.4.tar.bz2
		b34e2cbdd6aa8f9cc3fa613fd401a6d6  libpciaccess-0.16.tar.bz2
		dd7e1e946def674e78c0efbc5c7d5b3b  libxkbfile-1.1.0.tar.bz2
		42dda8016943dc12aff2c03a036e0937  libxshmfence-1.3.tar.bz2
	EOF

	grep -v '^#' ~/Documents/download\ libX | awk '{print $2}' | wget -i- -c -B https://www.x.org/pub/individual/lib/
	sudo apt install zlib1g-dev
	cat > /home/jeremi/Coding/Scripts/as_root << "EOF"
		as_root()
		{
		  if   [ $EUID = 0 ];        then $*
		  elif [ -x /usr/bin/sudo ]; then sudo $*
		  else                            su -c \\"$*\\"
		  fi
		}
		export -f as_root
	EOF
	source ~/Coding/Scripts/as_root
	bash -e
	
	(copy the entire script and press enter)
	######################################

	for package in $(grep -v '^#' ~/Documents/download\ libX | awk '{print $2}')
	do
	  packagedir=${package%.tar.bz2}
	  tar -xf $package
	  pushd $packagedir
	  docdir="--docdir=$XORG_PREFIX/share/doc/$packagedir"
	  case $packagedir in
	    libICE* )
	      ./configure $XORG_CONFIG $docdir ICE_LIBS=-lpthread
	    ;;

	    libXfont2-[0-9]* )
	      ./configure $XORG_CONFIG $docdir --disable-devel-docs
	    ;;

	    libXt-[0-9]* )
	      ./configure $XORG_CONFIG $docdir \
		          --with-appdefaultdir=/etc/X11/app-defaults
	    ;;

	    * )
	      ./configure $XORG_CONFIG $docdir
	    ;;
	  esac
	  make
	  #make check 2>&1 | tee ../$packagedir-make_check.log
	  as_root make install
	  popd
	  #rm -rf $packagedir
	  as_root /sbin/ldconfig
	done			

	######################################


4. install Emscripten
https://emscripten.org/docs/getting_started/downloads.html#

	git clone https://github.com/emscripten-core/emsdk.git
	cd emsdk
	git pull
	./emsdk install latest
	./emsdk activate latest

	export PATH="$PATH:/home/jeremi/Coding/Tools/emsdk:/home/jeremi/Coding/Tools/emsdk/node/14.15.5_64bit/bin:/home/jeremi/Coding/Tools/emsdk/upstream/emscripten"


5. Install libtool
https://www.gnu.org/software/libtool/

	sudo apt install libtool

6. Install Curl
https://github.com/curl/curl/blob/master/GIT-INFO

	sudo apt install libcurl-dev

OR

	git clone https://github.com/curl/curl.git
	cd curl
	autoreconf -fi
	./configure --with-openssl --enable-debug --enable-pthreads --prefix=/home/jeremi/Coding/Libs/curl/out
	make
	make test    (optional)
	make install
	ln -s  /home/jeremi/Coding/Libs/curl/out/bin/curl-config /usr/bin/curl-config
	sudo cp /home/jeremi/Coding/Libs/curl/out/include/ /usr/local/include


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
At this point you are ready to compile the Emscripten version of WebOS
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	cd ~/Coding/Apps/WebOS
	make

7. Install Docker
https://docs.docker.com/engine/install/

	sudo apt-get install docker.io

https://docs.docker.com/engine/install/linux-postinstall/

	sudo groupadd docker
	sudo usermod -aG docker $USER
	newgrp docker

8. Build docker image and run WebOS locally on localhost as a docker container on port 80

	docker build -t webos ./out/WASM/
	docker run -it -d --restart always -p 80:80 --name webos-frontend webos

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
WebOS is now live on your system on localhost on container called webos-frontend in docker
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	go to http://localhost:80 in your web browser to check everything works fine

	The guide will now detail further steps required to build on PC, MAC and LINUX

9. Install Libdrm
https://www.linuxfromscratch.org/blfs/view/svn/x/libdrm.html

extract the library, enter the extracted directory, and run the following commands:

	mkdir build 
	cd build
	meson --prefix=$XORG_PREFIX --buildtype=release -Dudev=true -Dvalgrind=false
	ninja
	ninja test
	sudo ninja install

10. Install MarkupSafe
https://www.linuxfromscratch.org/blfs/view/svn/general/python-modules.html#MarkupSafe

extract the library to a folder like "python-libs", for example ~/Coding/Libs/python-libs/, enter the extracted directory, and run the following commands:

	python3 setup.py build
	sudo python3 setup.py install --optimize=1

11. Install Mako
https://www.linuxfromscratch.org/blfs/view/svn/general/python-modules.html#Mako

extract the library to ~/Coding/Libs/python-libs/ and enter the extracted directory

	sudo python3 setup.py install --optimize=1

12. Install Mesa
https://www.linuxfromscratch.org/blfs/view/svn/x/mesa.html

extract the package, and run this script to fix up one of the tests scripts in mesa to use Python3 instead of the obsolete Python2 

	sed '1s/python/&3/' -i bin/symbols-check.py

Add /home/jeremi/Coding/Libs/Xorg/lib/x86_64-linux-gnu/pkgconfig to your PKG_CONFIG_PATH ~/.bashrc variable (delimited with a ":")

	sudo apt install bison
	sudo apt install flex
	meson --prefix=$XORG_PREFIX -Ddri-drivers=i965 -Dllvm=disabled -Dvalgrind=false -Dplatforms=x11 -Dgallium-drivers=i915 -Dvulkan-drivers=intel
	ninja
	ninja install (might need to provide sudo password)

13. Install GLEW
https://www.linuxfromscratch.org/blfs/view/svn/x/glew.html

Add the following into your ~/.bashrc

	export CPATH="/home/jeremi/Coding/Libs/Xorg/include"

	export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/jeremi/Coding/Libs/Xorg/lib:/home/jeremi/Coding/Libs/Xorg/lib/x86_64-linux-gnu"

	export LIBRARY_PATH="$LIBRARY_PATH:/home/jeremi/Coding/Libs/Xorg/lib:/home/jeremi/Coding/Libs/Xorg/lib/x86_64-linux-gnu"

Then, you can install make if you don't have it, and compile GLEW like this

	make
	sudo make install
	make clean

Now add the installation directory to the LD_LIBRARY_PATH

	export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/jeremi/Coding/Libs/Xorg/lib:/home/jeremi/Coding/Libs/Xorg/lib/x86_64-linux-gnu"

14. Install SDL2
https://www.linuxfromscratch.org/blfs/view/svn/multimedia/sdl2.html

Extract the library, enter the directory, and execute the following commands

	./configure
	make
	sudo make install

If you did all above steps correctly, this should just compile out of the box. Now add the include dir into the CPATH environment variable (substitute these paths with your SDL2 installation path set with --prefix if you set it)

	export CPATH="$CPATH:/usr/local/include/SDL2"
	export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib"
	export LIBRARY_PATH="$LIBRARY_PATH:/usr/local/lib"

15. Install libpng-dev
http://www.libpng.org/pub/png/libpng.html

	sudo apt-get install libpng-dev

OR

	download source from http://prdownloads.sourceforge.net/libpng/libpng-1.6.37.tar.xz?download
	./confiure
	make
	sudo make install

16. Install SDL2_Image
https://www.libsdl.org/projects/SDL_image/

	./configure
	make
	sudo make install

17. Install GLU
https://www.linuxfromscratch.org/blfs/view/svn/x/glu.html

	./configure
	make
	sudo make install

18. Install GL3W

	git clone https://github.com/skaslev/gl3w.git
	cd gl3w && python3 gl3w_gen.py

Set the proper environment variables to the sources and include directories you set

	export GL3W_INCLUDE="/home/jeremi/Coding/Libs/gl3w/include/GL/"
	export GL3W_SRC="/home/jeremi/Coding/Libs/gl3w/src/"

19. Install cmake

	sudo apt install cmake

20. Install GLFW
https://www.glfw.org/

	cmake .
	make
	sudo make install
		

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Hurray! Now you are ready to compile WebOS for Linux!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


21. Compile WebOS

Go to the the root directory of the WebOS project, for instance /home/jeremi/Coding/Apps/WebOS

	make LINUX=1

Now run the application and you're done!

	./out/Linux/WebOS

Three different elements are needed to compile:
    1. OpenGL
    2. the GL Utilities (GLU) which are not part of OpenGL
    3. and the GL Extension Wrangler (GLEW) 
    4. A library for OpenGL (GLFW)
    5. A wrapper, or lightweight version of a OpenGL loader (GL3W)



